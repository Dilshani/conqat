/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

/* 
   This grammar is based on 
   http://docs.python.org/3.1/reference/lexical_analysis.html */

package org.conqat.lib.scanner;

import org.conqat.lib.commons.string.StringUtils;
import java.util.Stack;
import static org.conqat.lib.scanner.ETokenType.*;
import java.util.EnumMap;
import org.conqat.lib.commons.assertion.CCSMAssert;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/local/conqat-root/lib/org.conqat.lib.scanner/grammars/python.flex</tt>
 */
class PythonScanner extends QueuedScannerBase<PythonToken> {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPLICIT_LINE_JOIN = 4;
  public static final int IMPLICIT_LINE_JOIN = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  2, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\12\1\1\22\0\1\27\1\55\1\16"+
    "\1\4\1\0\1\46\1\47\1\15\1\30\1\31\1\44\1\43\1\40"+
    "\1\25\1\23\1\45\1\5\1\11\6\7\2\6\1\41\1\37\1\52"+
    "\1\36\1\53\1\0\1\42\1\56\1\22\1\64\1\60\1\24\1\10"+
    "\1\73\1\75\1\66\1\26\1\63\1\65\1\72\1\57\1\20\1\70"+
    "\1\13\1\14\1\61\1\62\1\67\1\13\1\74\1\21\1\71\1\13"+
    "\1\34\1\17\1\35\1\51\1\13\1\0\1\56\1\22\1\64\1\60"+
    "\1\24\1\10\1\73\1\75\1\66\1\26\1\63\1\65\1\72\1\57"+
    "\1\20\1\70\1\13\1\14\1\61\1\62\1\67\1\13\1\74\1\21"+
    "\1\71\1\13\1\32\1\50\1\33\1\54\53\0\1\13\12\0\1\13"+
    "\4\0\1\13\5\0\27\13\1\0\7\13\30\13\1\0\10\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\2\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\2\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13"+
    "\1\13\1\13\3\13\2\13\1\13\1\13\1\13\2\13\1\13\3\13"+
    "\2\13\4\13\1\13\2\13\1\13\3\13\3\13\2\13\1\13\2\13"+
    "\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13\2\13\1\13"+
    "\1\13\2\13\1\13\3\13\1\13\1\13\1\13\2\13\2\13\1\0"+
    "\1\13\3\13\4\0\1\13\1\0\1\13\1\13\1\0\1\13\1\13"+
    "\1\0\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\0\1\13\1\13"+
    "\1\13\3\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\7\13\2\13\1\13\2\13\2\13\1\13\1\13\4\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\105\13\1\0\44\13\7\0"+
    "\2\13\36\0\5\13\140\0\1\13\52\0\1\13\1\13\1\13\1\13"+
    "\2\0\1\13\1\13\2\0\4\13\10\0\1\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\1\13\21\13\1\0\11\13\43\13\1\13\2\13"+
    "\3\13\3\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\5\13\1\13\1\13\1\0\1\13"+
    "\1\13\2\13\2\13\63\13\60\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\10\0"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\2\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\11\0\46\13\12\0\47\13"+
    "\u0b18\0\46\13\u0c3a\0\300\13\100\0\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\11\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\11\13\10\13\6\13\2\0\6\13\2\0\10\13\10\13"+
    "\10\13\10\13\6\13\2\0\6\13\2\0\10\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\10\13\10\13\16\13\2\0\10\13"+
    "\10\0\10\13\10\0\10\13\10\0\5\13\1\0\2\13\4\13\2\0"+
    "\1\13\3\0\3\13\1\0\2\13\4\13\4\0\4\13\2\0\2\13"+
    "\4\13\4\0\10\13\5\13\5\0\3\13\1\0\2\13\4\13\224\0"+
    "\5\13\155\0\1\13\4\0\1\13\2\0\1\13\3\13\2\13\3\13"+
    "\1\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\4\13\1\0\1\13\4\13\1\13\4\0\1\13\2\0"+
    "\2\13\2\13\5\0\1\13\4\13\4\0\1\13\21\0\20\13\20\13"+
    "\3\0\1\13\1\13\u0331\0\32\13\32\13\u0716\0\57\13\1\0\57\13"+
    "\1\0\1\13\1\13\3\13\2\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\4\13\1\13\1\13\2\13\1\13\10\13\3\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\2\13\6\0\1\13\1\13"+
    "\1\13\1\13\21\0\46\13\u791a\0\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\22\0\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\212\0\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\3\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\12\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\3\0\1\13\1\13"+
    "\1\13\1\13\1\0\1\13\1\13\16\0\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\120\0\1\13\u5305\0\7\13"+
    "\14\0\5\13\u0409\0\32\13\6\0\32\13\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\0\1\2\2\3\1\4\1\5\2\6"+
    "\1\7\1\10\2\7\3\2\2\7\1\11\1\7\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\2\13\7\2\4"+
    "\1\1\3\0\1\40\1\3\1\0\2\5\1\6\4\0"+
    "\1\41\1\0\1\42\4\7\2\0\2\7\1\0\1\43"+
    "\2\0\1\43\1\0\2\44\1\0\1\33\3\7\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\7"+
    "\1\65\6\7\1\66\1\67\1\70\6\7\1\71\1\0"+
    "\3\6\1\41\1\0\1\7\1\72\4\7\1\43\4\0"+
    "\4\7\1\73\1\74\1\75\1\76\1\32\2\7\1\77"+
    "\1\100\1\101\1\7\1\102\11\7\1\103\4\7\2\0"+
    "\2\7\1\104\1\105\1\7\1\106\1\7\1\107\4\7"+
    "\1\110\2\7\1\111\1\7\1\112\2\7\1\113\2\0"+
    "\1\114\4\7\1\115\2\7\1\116\1\7\1\117\1\7"+
    "\1\120\2\43\1\121\1\122\2\7\1\123\1\124\1\125"+
    "\1\126\2\43\2\7\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u0174\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0174\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0592"+
    "\0\u0174\0\u0174\0\u0174\0\u0174\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u0174\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0174\0\u0bde"+
    "\0\u0174\0\u0c1c\0\u0c1c\0\u0c5a\0\u0174\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0174\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\u03a2\0\u03e0\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u0174\0\u041e\0\u0326\0\u1170"+
    "\0\u11ae\0\u11ec\0\u0174\0\u0174\0\u0174\0\u0174\0\u122a\0\u0174"+
    "\0\u1268\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u12a6\0\u0174"+
    "\0\u12e4\0\u0174\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u0326\0\u0326\0\u0326\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u0174\0\u0ae6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u1686\0\u16c4\0\u1702\0\u0326\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u0174\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u0174\0\u0174\0\u0174\0\u0174\0\u0326\0\u1a28\0\u1a66"+
    "\0\u0326\0\u0326\0\u0326\0\u1aa4\0\u0326\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u0326\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u0326"+
    "\0\u0326\0\u1f00\0\u0326\0\u1f3e\0\u0326\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u0326\0\u2074\0\u20b2\0\u0326\0\u20f0\0\u0326\0\u212e"+
    "\0\u216c\0\u0326\0\u21aa\0\u21e8\0\u0326\0\u2226\0\u2264\0\u22a2"+
    "\0\u22e0\0\u0326\0\u231e\0\u235c\0\u0326\0\u239a\0\u0326\0\u23d8"+
    "\0\u0326\0\u2416\0\u2454\0\u0326\0\u0326\0\u2492\0\u24d0\0\u0326"+
    "\0\u0326\0\u0326\0\u0326\0\u250e\0\u254c\0\u258a\0\u25c8\0\u0326"+
    "\0\u0326";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\15\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\20\1\26\1\27\1\30\1\31\1\20\1\12\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\20\1\63\1\20\1\64\1\65\1\66\1\20\1\67"+
    "\1\70\1\20\1\71\1\72\1\20\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\15\1\16\1\15\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\20\1\26\1\27"+
    "\1\30\1\31\1\20\1\73\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\20\1\63\1\20"+
    "\1\64\1\65\1\66\1\20\1\67\1\70\1\20\1\71"+
    "\1\72\1\20\1\7\1\74\2\12\1\13\1\14\2\15"+
    "\1\16\1\15\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\20\1\26\1\27\1\30\1\31\1\20\1\12"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\20\1\63\1\20\1\64\1\65\1\66\1\20"+
    "\1\67\1\70\1\20\1\71\1\72\1\20\1\7\1\74"+
    "\2\12\1\13\1\14\2\15\1\16\1\15\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\20\1\26\1\27"+
    "\1\30\1\31\1\20\1\75\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\20\1\63\1\20"+
    "\1\64\1\65\1\66\1\20\1\67\1\70\1\20\1\71"+
    "\1\72\1\20\4\0\1\76\72\0\1\77\1\100\171\0"+
    "\1\101\1\102\1\11\1\103\1\0\22\101\1\103\47\101"+
    "\2\102\1\103\1\0\22\101\1\103\46\101\1\13\1\104"+
    "\1\105\73\13\5\0\1\106\2\107\1\0\1\107\6\0"+
    "\1\110\1\111\1\112\1\113\1\114\1\0\1\115\54\0"+
    "\3\15\1\0\1\15\11\0\1\113\1\114\1\0\1\115"+
    "\54\0\5\20\1\0\1\20\1\116\3\0\1\117\2\20"+
    "\1\0\1\20\1\0\1\20\27\0\1\120\7\20\1\121"+
    "\7\20\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\20\20\5\0\5\20\1\0"+
    "\2\20\1\122\1\123\1\0\3\20\1\0\1\124\1\0"+
    "\1\20\27\0\1\125\17\20\1\126\2\0\12\126\1\127"+
    "\1\126\1\130\56\126\1\131\2\0\13\131\1\132\1\133"+
    "\56\131\1\0\1\134\1\135\1\136\23\0\1\136\53\0"+
    "\5\20\1\0\1\20\1\137\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\20\20\5\0\5\20\1\0\1\20"+
    "\1\140\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\20\20\5\0\3\113\1\0\1\113\71\0\5\20\1\0"+
    "\2\20\3\0\1\20\1\141\1\20\1\0\1\20\1\0"+
    "\1\20\27\0\7\20\1\142\10\20\36\0\1\143\75\0"+
    "\1\144\75\0\1\145\75\0\1\146\5\0\1\147\67\0"+
    "\1\150\6\0\1\151\66\0\1\152\75\0\1\153\75\0"+
    "\1\154\75\0\1\155\75\0\1\156\13\0\1\157\61\0"+
    "\1\160\14\0\1\161\60\0\1\162\44\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\1\20\1\163\1\20\1\164\14\20\5\0\5\20\1\0"+
    "\2\20\3\0\1\165\2\20\1\0\1\20\1\0\1\20"+
    "\27\0\20\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\166\1\0\1\20\27\0\20\20\5\0\5\20"+
    "\1\0\1\20\1\167\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\20\20\5\0\5\20\1\0\2\20\3\0"+
    "\1\170\2\20\1\0\1\20\1\0\1\20\27\0\7\20"+
    "\1\171\10\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\20\1\0\1\20\27\0\1\172\17\20\5\0"+
    "\3\20\1\173\1\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\1\20\1\174\1\20\1\175"+
    "\10\20\1\176\3\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\1\177\17\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\10\20\1\200\7\20\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\7\20\1\201\10\20\5\0\5\20\1\0\2\20"+
    "\3\0\3\20\1\0\1\20\1\0\1\20\27\0\10\20"+
    "\1\202\6\20\1\203\1\204\4\0\22\204\1\205\46\204"+
    "\2\0\1\12\122\0\1\75\46\0\1\76\2\0\73\76"+
    "\1\0\1\77\75\0\2\102\1\103\23\0\1\103\50\0"+
    "\1\105\100\0\1\106\2\107\1\0\1\107\11\0\1\113"+
    "\1\114\1\0\1\115\54\0\3\107\1\0\1\107\11\0"+
    "\1\113\1\114\1\0\1\115\54\0\1\206\1\0\1\206"+
    "\1\0\1\206\71\0\5\207\10\0\1\207\1\0\1\207"+
    "\31\0\1\207\1\0\1\207\3\0\1\207\16\0\1\210"+
    "\3\0\1\210\71\0\3\113\1\0\1\113\12\0\1\114"+
    "\1\0\1\115\54\0\3\211\1\0\1\211\13\0\1\212"+
    "\15\0\1\212\37\0\5\20\1\0\2\20\3\0\1\213"+
    "\2\20\1\0\1\20\1\0\1\20\27\0\20\20\5\0"+
    "\5\20\1\0\1\20\1\214\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\20\20\5\0\5\20\1\0\2\20"+
    "\3\0\3\20\1\0\1\20\1\0\1\20\27\0\7\20"+
    "\1\215\10\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\20\1\0\1\20\27\0\1\20\1\216\16\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\4\20\1\217\13\20\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\10\20\1\220\7\20\1\126\2\0\12\126\1\221"+
    "\1\126\1\130\56\126\15\0\1\222\60\0\1\126\1\223"+
    "\74\126\1\131\2\0\13\131\1\221\1\133\56\131\16\0"+
    "\1\224\57\0\1\131\1\225\74\131\2\0\1\135\100\0"+
    "\5\20\1\0\2\20\3\0\3\20\1\0\1\226\1\0"+
    "\1\20\27\0\20\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\6\20\1\227"+
    "\11\20\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\3\20\1\230\4\20\1\231"+
    "\7\20\36\0\1\232\75\0\1\233\75\0\1\234\75\0"+
    "\1\235\44\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\2\20\1\236\15\20\5\0"+
    "\5\20\1\0\2\20\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\3\20\1\237\14\20\5\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\1\20\1\240\2\20\1\241\13\20\5\0\3\20\1\242"+
    "\1\20\1\0\2\20\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\7\20\1\243\10\20\5\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\11\20\1\244\1\20\1\245\4\20\5\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\1\20\1\246\16\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\1\247\17\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\14\20\1\250\3\20\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\12\20\1\251\5\20\5\0\5\20\1\0\2\20"+
    "\3\0\3\20\1\0\1\20\1\0\1\20\27\0\3\20"+
    "\1\252\14\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\253\1\0\1\20\27\0\20\20\5\0\5\20"+
    "\1\0\2\20\3\0\1\254\2\20\1\0\1\20\1\0"+
    "\1\20\27\0\20\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\4\20\1\255"+
    "\13\20\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\10\20\1\256\7\20\5\0"+
    "\3\211\1\0\1\211\14\0\1\115\54\0\3\211\1\0"+
    "\1\211\71\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\14\20\1\257\3\20\5\0"+
    "\5\20\1\0\2\20\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\3\20\1\260\14\20\5\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\1\261\17\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\20\1\0\1\20\27\0\11\20\1\262\6\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\3\20\1\263\14\20\15\222\1\264"+
    "\60\222\1\126\1\0\13\126\1\221\1\126\1\130\56\126"+
    "\16\224\1\265\57\224\1\131\1\0\14\131\1\221\1\133"+
    "\56\131\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\1\266\17\20\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\267\1\0\1\20"+
    "\27\0\20\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\270\1\0\1\20\27\0\20\20\5\0\3\20"+
    "\1\271\1\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\20\20\5\0\5\20\1\0\2\20"+
    "\3\0\3\20\1\0\1\272\1\0\1\20\27\0\20\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\273"+
    "\1\0\1\20\27\0\7\20\1\274\10\20\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\275\1\0\1\20"+
    "\27\0\20\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\20\1\0\1\20\27\0\4\20\1\276\13\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\3\20\1\277\14\20\5\0\5\20"+
    "\1\0\2\20\3\0\2\20\1\300\1\0\1\20\1\0"+
    "\1\20\27\0\20\20\5\0\5\20\1\0\2\20\3\0"+
    "\1\301\2\20\1\0\1\20\1\0\1\20\27\0\20\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\3\20\1\302\14\20\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\7\20\1\303\10\20\5\0\5\20\1\0\2\20"+
    "\3\0\2\20\1\304\1\0\1\20\1\0\1\20\27\0"+
    "\20\20\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\17\20\1\305\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\7\20\1\306\10\20\5\0\5\20\1\0\2\20"+
    "\3\0\3\20\1\0\1\307\1\0\1\20\27\0\20\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\7\20\1\310\10\20\5\0\5\20"+
    "\1\0\1\20\1\311\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\20\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\312\1\0\1\20\27\0\20\20\15\222"+
    "\1\313\60\222\16\224\1\314\57\224\5\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\5\20\1\315\12\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\12\20\1\316"+
    "\5\20\5\0\5\20\1\0\1\20\1\317\3\0\3\20"+
    "\1\0\1\20\1\0\1\20\27\0\20\20\5\0\5\20"+
    "\1\0\2\20\3\0\1\320\2\20\1\0\1\20\1\0"+
    "\1\20\27\0\20\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\10\20\1\321"+
    "\7\20\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\3\20\1\322\14\20\5\0"+
    "\5\20\1\0\2\20\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\2\20\1\323\15\20\5\0\5\20\1\0"+
    "\1\20\1\324\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\20\20\5\0\5\20\1\0\2\20\3\0\3\20"+
    "\1\0\1\20\1\0\1\20\27\0\2\20\1\325\15\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\1\326\17\20\5\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\327\1\0\1\20\27\0"+
    "\20\20\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\7\20\1\330\10\20\5\0"+
    "\5\20\1\0\2\20\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\1\20\1\331\16\20\15\222\1\332\60\222"+
    "\16\224\1\333\57\224\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\4\20\1\334"+
    "\13\20\5\0\5\20\1\0\2\20\3\0\3\20\1\0"+
    "\1\20\1\0\1\20\27\0\4\20\1\335\13\20\5\0"+
    "\5\20\1\0\2\20\3\0\3\20\1\0\1\20\1\0"+
    "\1\20\27\0\6\20\1\336\11\20\5\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\1\20\1\337\16\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\1\340\17\20"+
    "\5\0\5\20\1\0\2\20\3\0\3\20\1\0\1\20"+
    "\1\0\1\20\27\0\4\20\1\341\13\20\5\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\7\20\1\342\10\20\5\0\5\20\1\0\2\20"+
    "\3\0\3\20\1\0\1\20\1\0\1\20\27\0\13\20"+
    "\1\343\4\20\15\0\1\344\76\0\1\345\64\0\5\20"+
    "\1\0\2\20\3\0\3\20\1\0\1\20\1\0\1\20"+
    "\27\0\1\346\17\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\20\1\0\1\20\27\0\11\20\1\347"+
    "\6\20\15\0\1\221\76\0\1\221\64\0\5\20\1\0"+
    "\2\20\3\0\3\20\1\0\1\20\1\0\1\20\27\0"+
    "\7\20\1\350\10\20\5\0\5\20\1\0\2\20\3\0"+
    "\3\20\1\0\1\351\1\0\1\20\27\0\20\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9734];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\0\1\1\1\11\2\1\1\11\4\1"+
    "\1\11\12\1\6\11\1\1\4\11\11\1\1\11\20\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\4\0\1\1\1\0\1\11\4\1\2\0\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\11\1\0\4\1"+
    "\4\11\1\1\1\11\1\1\5\11\1\1\1\11\1\1"+
    "\1\11\21\1\1\11\1\0\4\1\1\0\6\1\1\11"+
    "\4\0\4\1\4\11\26\1\2\0\25\1\2\0\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private StringBuilder string = new StringBuilder();

  private String originId;
  
  private TabReplacingReader tabReplacingReader;
  
  private Stack<Integer> indent = new Stack<Integer>();
  private Stack<ETokenType> brackets = new Stack<ETokenType>();
  
   /** this is used for the strange quoted-syntax for strings. */
  char stringTerminator;
  
  private static EnumMap<ETokenType,ETokenType> bracketMap = new EnumMap<ETokenType,ETokenType>(ETokenType.class);
  
  static {
  	bracketMap.put(LBRACE,RBRACE);
  	bracketMap.put(LPAREN,RPAREN);
  	bracketMap.put(LBRACK,RBRACK);
  }
  
   /** Create new scanner for Python. */
   public PythonScanner(java.io.Reader in, String originId) {
		tabReplacingReader = new TabReplacingReader(in);
		this.zzReader = tabReplacingReader;
		this.originId = originId;
		indent.push(0);
	}
  
  /** 
   * Resets scanner and underlying tab replacing scanner.
   */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId=originId;
    tabReplacingReader.yyreset(reader);
    yyreset(tabReplacingReader);
  }
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  }
  
  private PythonToken token(ETokenType type) {
  	return new PythonToken(type, yychar, yyline, yytext(), originId);
  }
  
  private ETokenType openBracket(ETokenType type){
  	 brackets.push(type);
  	 yybegin(IMPLICIT_LINE_JOIN);
  	 return type;
  } 
  
  private ETokenType closeBracket(ETokenType type) {
    if (brackets.isEmpty()){
    	return BRACKET_MISMATCH;
    }
    //must check against specific bracket
    ETokenType bracket = brackets.pop();
    
    CCSMAssert.isTrue(bracketMap.containsKey(bracket),
				"The stack really souldn't contain anything "
						+ "that is not in the map.");
            
    if (bracketMap.get(bracket)!=type){
    	return BRACKET_MISMATCH;
    }
  	if (brackets.isEmpty()){
  		yybegin(YYINITIAL);
  	}
  	return type;
  }
  
   /** This indicates that a constructor shouldn't be used. */
  public class DeprecatedConstructorException extends Exception {}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PythonScanner(java.io.Reader in) throws DeprecatedConstructorException
 {
  	if (true) throw new DeprecatedConstructorException();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PythonScanner(java.io.InputStream in) throws DeprecatedConstructorException
 {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2674) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PythonToken internalScan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 66: 
          { return token(TRY);
          }
        case 89: break;
        case 75: 
          { return token(RAISE);
          }
        case 90: break;
        case 18: 
          { return token(SEMICOLON);
          }
        case 91: break;
        case 65: 
          { return token(DEL);
          }
        case 92: break;
        case 52: 
          { return token(NOTEQ);
          }
        case 93: break;
        case 13: 
          { return token(openBracket(LBRACE));
          }
        case 94: break;
        case 9: 
          { return token(DOT);
          }
        case 95: break;
        case 79: 
          { return token(WHILE);
          }
        case 96: break;
        case 30: 
          { return token(GT);
          }
        case 97: break;
        case 39: 
          { return token(PLUSEQ);
          }
        case 98: break;
        case 41: 
          { return token(POWER);
          }
        case 99: break;
        case 11: 
          { return token(openBracket(LPAREN));
          }
        case 100: break;
        case 26: 
          { return token(AND);
          }
        case 101: break;
        case 19: 
          { return token(COMMA);
          }
        case 102: break;
        case 17: 
          { return token(EQ);
          }
        case 103: break;
        case 6: 
          { return token(INTEGER_LITERAL);
          }
        case 104: break;
        case 88: 
          { return token(CONTINUE);
          }
        case 105: break;
        case 80: 
          { return token(RETURN);
          }
        case 106: break;
        case 33: 
          { return token(FLOATING_POINT_LITERAL);
          }
        case 107: break;
        case 56: 
          { return token(IS);
          }
        case 108: break;
        case 85: 
          { return token(GLOBAL);
          }
        case 109: break;
        case 8: 
          { yyline -= 1;
          }
        case 110: break;
        case 63: 
          { return token(NOT);
          }
        case 111: break;
        case 67: 
          { return token(FROM);
          }
        case 112: break;
        case 29: 
          { return token(LT);
          }
        case 113: break;
        case 46: 
          { return token(OREQ);
          }
        case 114: break;
        case 15: 
          { return token(openBracket(LBRACK));
          }
        case 115: break;
        case 69: 
          { return token(ELIF);
          }
        case 116: break;
        case 70: 
          { return token(NONE);
          }
        case 117: break;
        case 64: 
          { return token(DEF);
          }
        case 118: break;
        case 43: 
          { return token(FLOOR_DIV);
          }
        case 119: break;
        case 36: 
          { /* ignore */ yybegin(EXPLICIT_LINE_JOIN);
          }
        case 120: break;
        case 32: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (indent.peek()==0){
         	return token(EOL);
         } 
         
         //we need to store this as we are changing the
         //stack within the loop
         int k=indent.size();
         
         for (int i=1;i<k;i++){
         		indent.pop();      		
         		pushToken(new PythonToken(DEDENT, yychar, yyline, StringUtils.EMPTY_STRING, originId));
         }
         CCSMAssert.isTrue(indent.size()==1, "There should be only the 0 indent on the stack. "+
         " Line:"+yyline);
         return token(EOL);
          }
        case 121: break;
        case 34: 
          { return token(IMAGINARY_LITERAL);
          }
        case 122: break;
        case 86: 
          { return token(FINALLY);
          }
        case 123: break;
        case 45: 
          { return token(ANDEQ);
          }
        case 124: break;
        case 55: 
          { return token(IN);
          }
        case 125: break;
        case 44: 
          { return token(MODEQ);
          }
        case 126: break;
        case 27: 
          { return token(OR);
          }
        case 127: break;
        case 5: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 4;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 5;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return token(END_OF_LINE_COMMENT);
          }
        case 128: break;
        case 28: 
          { return token(XOR);
          }
        case 129: break;
        case 82: 
          { return token(ASSERT);
          }
        case 130: break;
        case 48: 
          { return token(LTEQ);
          }
        case 131: break;
        case 57: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { int indentDepth = yytext().length();
         int maxIndentDepth = indent.peek();
         
         if (indentDepth>maxIndentDepth) {
            CCSMAssert.isFalse(indent.search(indentDepth) != -1,
							"Depth " + indentDepth + " already on stack");
         	indent.push(indentDepth); 	
         	return new PythonToken(INDENT, yychar, yyline, StringUtils.EMPTY_STRING, originId);
         }
         
         if (indentDepth<maxIndentDepth){
         	int index = indent.search(indentDepth);
         	if (index<0){
         		return new PythonToken(INVALID_DEDENT, yychar, yyline, StringUtils.EMPTY_STRING, originId);
         	}
         	//start from 1 as Stack.search returns a one-based index
         	for (int i=1;i<index;i++){
         		indent.pop();
         		//we need to push one less as this method already returns one
         		if (i<index-1){
         			pushToken(new PythonToken(DEDENT, yychar, yyline, StringUtils.EMPTY_STRING, originId));
         		}
         	}
         	return new PythonToken(DEDENT, yychar, yyline, StringUtils.EMPTY_STRING, originId);
        }
          }
        case 132: break;
        case 37: 
          { return token(MINUSEQ);
          }
        case 133: break;
        case 14: 
          { return token(closeBracket(RBRACE));
          }
        case 134: break;
        case 23: 
          { return token(MULT);
          }
        case 135: break;
        case 77: 
          { return token(CLASS);
          }
        case 136: break;
        case 3: 
          { /* Ignore empty line */ return token(EOL);
          }
        case 137: break;
        case 40: 
          { return token(MULTEQ);
          }
        case 138: break;
        case 42: 
          { return token(DIVEQ);
          }
        case 139: break;
        case 2: 
          { return token(ILLEGAL_CHARACTER);
          }
        case 140: break;
        case 68: 
          { return token(ELSE);
          }
        case 141: break;
        case 12: 
          { return token(closeBracket(RPAREN));
          }
        case 142: break;
        case 60: 
          { return token(FLOOR_DIVEQ);
          }
        case 143: break;
        case 7: 
          { return token(IDENTIFIER);
          }
        case 144: break;
        case 61: 
          { return token(LSHIFTEQ);
          }
        case 145: break;
        case 54: 
          { return token(IF);
          }
        case 146: break;
        case 16: 
          { return token(closeBracket(RBRACK));
          }
        case 147: break;
        case 50: 
          { return token(GTEQ);
          }
        case 148: break;
        case 76: 
          { return token(BREAK);
          }
        case 149: break;
        case 87: 
          { return token(NONLOCAL);
          }
        case 150: break;
        case 51: 
          { return token(RSHIFT);
          }
        case 151: break;
        case 74: 
          { return token(FALSE);
          }
        case 152: break;
        case 83: 
          { return token(LAMBDA);
          }
        case 153: break;
        case 78: 
          { return token(YIELD);
          }
        case 154: break;
        case 59: 
          { return token(POWEREQ);
          }
        case 155: break;
        case 47: 
          { return token(XOREQ);
          }
        case 156: break;
        case 62: 
          { return token(RSHIFTEQ);
          }
        case 157: break;
        case 58: 
          { return token(FOR);
          }
        case 158: break;
        case 71: 
          { return token(TRUE);
          }
        case 159: break;
        case 31: 
          { return token(BIT_NOT);
          }
        case 160: break;
        case 81: 
          { return token(EXCEPT);
          }
        case 161: break;
        case 49: 
          { return token(LSHIFT);
          }
        case 162: break;
        case 4: 
          { /* ignore */
          }
        case 163: break;
        case 84: 
          { return token(IMPORT);
          }
        case 164: break;
        case 38: 
          { return token(EQEQ);
          }
        case 165: break;
        case 73: 
          { return token(WITH);
          }
        case 166: break;
        case 24: 
          { return token(DIV);
          }
        case 167: break;
        case 10: 
          { return token(MINUS);
          }
        case 168: break;
        case 22: 
          { return token(PLUS);
          }
        case 169: break;
        case 25: 
          { return token(MOD);
          }
        case 170: break;
        case 72: 
          { return token(PASS);
          }
        case 171: break;
        case 21: 
          { return token(AT);
          }
        case 172: break;
        case 35: 
          { return token(STRING_LITERAL);
          }
        case 173: break;
        case 20: 
          { return token(COLON);
          }
        case 174: break;
        case 53: 
          { return token(AS);
          }
        case 175: break;
        case 1: 
          { /* ignore indent*/ yybegin(YYINITIAL);
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                //clear stack 
	if (indent.size()>1){
		indent.pop();
		return new PythonToken(DEDENT, yychar, yyline, StringUtils.EMPTY_STRING, originId);
	} return token(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
