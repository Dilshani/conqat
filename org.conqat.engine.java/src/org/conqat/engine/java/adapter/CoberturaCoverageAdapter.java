/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2005-2011 The ConQAT Project                                   |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
+-------------------------------------------------------------------------*/
package org.conqat.engine.java.adapter;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Utility;
import org.conqat.engine.core.core.AConQATAttribute;
import org.conqat.engine.core.core.AConQATKey;
import org.conqat.engine.core.core.AConQATParameter;
import org.conqat.engine.core.core.AConQATProcessor;
import org.conqat.engine.core.core.ConQATException;
import org.conqat.engine.java.base.JavaAnalyzerBase;
import org.conqat.engine.java.resource.IJavaElement;
import org.conqat.engine.java.resource.IJavaResource;
import org.conqat.lib.commons.collections.ListMap;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * This processor reads and parses a test coverage result file generated by <a
 * href="http://cobertura.sourceforge.net/">Cobertura</a> and annotates nodes
 * accordingly.
 * 
 * @author Florian Deissenboeck
 * @author $Author: hummelb $
 * @version $Rev: 43290 $
 * @ConQAT.Rating GREEN Hash: B8445ED08A4956F4378512444A406D78
 * 
 */
@AConQATProcessor(description = "This processor reads and parses a test coverage "
		+ "result file generated by Cobertura (http://cobertura.sourceforge.net/) "
		+ "and annotates nodes accordingly.")
public class CoberturaCoverageAdapter extends JavaAnalyzerBase {

	/** Key for line coverage value result */
	@AConQATKey(description = "Lines of code", type = "java.lang.Double")
	public static final String LINE_COVERAGE_KEY = "Line Coverage";

	/** Key for list of uncovered methods */
	@AConQATKey(description = "Uncovered method list", type = "java.util.List<String>")
	public static final String UNCOVERED_METHODS_KEY = "Uncovered Methods";

	/** Number of uncovered methods. */
	@AConQATKey(description = "Uncovered method count.", type = "java.lang.Integer")
	public static final String UNCOVERED_METHODS_COUNT_KEY = "# Uncovered Methods";

	/** Name of the Cobertura result file. */
	private String filename;

	/** Maps full qualified Java element names to line coverage values. */
	private final HashMap<String, Double> lineCoverageMap = new HashMap<String, Double>();

	/**
	 * This maps from full qualified class names to a list of strings describing
	 * the methods that weren't touched at all.
	 */
	private final ListMap<String, String> uncoveredMethods = new ListMap<String, String>();

	/** Set path of the Cobertura result file. */
	@AConQATParameter(name = "file", minOccurrences = 1, maxOccurrences = 1, description = "Cobertura result file.")
	public void setFilename(
			@AConQATAttribute(name = "path", description = "Path to file.") String filename) {
		this.filename = filename;
	}

	/** {@inheritDoc} */
	@Override
	protected String[] getKeys() {
		return new String[] { LINE_COVERAGE_KEY, UNCOVERED_METHODS_KEY,
				UNCOVERED_METHODS_COUNT_KEY };
	}

	/** {@inheritDoc} */
	@Override
	protected void setUp(IJavaResource root) throws ConQATException {
		super.setUp(root);

		// parse the Cobertura XML file
		try {
			SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
			parser.parse(new File(filename), new ResultFileHandler());
		} catch (ParserConfigurationException e) {
			throw new ConQATException("Couldn't configure XML parser", e);
		} catch (SAXException e) {
			throw new ConQATException("Parsing exception", e);
		} catch (IOException e) {
			throw new ConQATException("IO exception", e);
		}
	}

	/** {@inheritDoc} */
	@Override
	protected void analyze(IJavaElement element, JavaClass clazz) {
		// set line coverage
		Double lineCoverage = lineCoverageMap.get(element.getId());
		if (lineCoverage != null) {
			element.setValue(LINE_COVERAGE_KEY, lineCoverage);
		}

		// determine uncovered method list
		List<String> uncoveredMethodList = uncoveredMethods
				.getCollection(element.getId());
		if (uncoveredMethodList != null) {
			element.setValue(UNCOVERED_METHODS_KEY, uncoveredMethodList);
			element.setValue(UNCOVERED_METHODS_COUNT_KEY,
					uncoveredMethodList.size());
		}
	}

	/** Simple SAX handler for parsing Cobertura result files. */
	/* package */class ResultFileHandler extends DefaultHandler {

		/** Name of current class. */
		private String className;

		/**
		 * Select elements with names "class" and "package", extract there name
		 * and line coverage value and store them in
		 * {@link CoberturaCoverageAdapter#lineCoverageMap}.
		 */
		@Override
		public void startElement(String uri, String localName, String qName,
				Attributes attributes) {

			// determine line coverage for class
			if (qName.equals("class") || qName.equals("package")) {
				// store class name
				className = attributes.getValue("name");
				String lineCoverageAttribute = attributes.getValue("line-rate");

				if (lineCoverageAttribute != null) {
					double lineCoverage = Double
							.parseDouble(lineCoverageAttribute);
					lineCoverageMap.put(className, lineCoverage);
				}
			}

			// detect uncovered methods, make sure we are inside a class
			if (qName.equals("method") && className != null) {
				String methodName = attributes.getValue("name");
				String lineCoverageAttribute = attributes.getValue("line-rate");
				double lineCoverage = Double.parseDouble(lineCoverageAttribute);
				String branchCoverageAttribute = attributes
						.getValue("line-rate");
				double branchCoverage = Double
						.parseDouble(branchCoverageAttribute);

				// if line coverage and branch coverage is zero, this method
				// wasn't touched at all
				if (lineCoverage == 0.0 && branchCoverage == 0.0) {

					String signature = attributes.getValue("signature");

					// BCEL creates a readable representation of the
					// '(Ljava/lang/String;)Z'-stuff
					String description = Utility.methodSignatureToString(
							signature, methodName, "", true);

					uncoveredMethods.add(className, description);
				}
			}
		}
	}
}