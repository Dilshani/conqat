
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Nov 05 10:46:22 CET 2013
//----------------------------------------------------

package org.conqat.lib.simulink.targetlink;

import java.util.List;
import java.util.ArrayList;
import org.conqat.lib.simulink.builder.MDLParserException;
import org.conqat.lib.commons.collections.ImmutablePair;
import java.util.ArrayList;
import org.conqat.lib.commons.string.StringUtils;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Nov 05 10:46:22 CET 2013
  */
public class TargetlinkDataParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TargetlinkDataParser() {super();}

  /** Constructor which sets the default scanner. */
  public TargetlinkDataParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\003\006\000\002\004" +
    "\005\000\002\004\003\000\002\005\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\006\000\002\007\010\000\002\007\005\000\002\011\005" +
    "\000\002\011\003\000\002\013\004\000\002\013\003\000" +
    "\002\010\005\000\002\012\005\000\002\014\005\000\002" +
    "\014\004\000\002\015\005\000\002\015\004\000\002\016" +
    "\005\000\002\016\003\000\002\017\003\000\002\017\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\021\005\001\002\000\004\002\101\001" +
    "\002\000\004\012\006\001\002\000\004\014\007\001\002" +
    "\000\004\020\015\001\002\000\006\013\013\020\012\001" +
    "\002\000\006\013\ufffe\020\ufffe\001\002\000\004\014\007" +
    "\001\002\000\010\002\000\013\000\020\000\001\002\000" +
    "\006\013\uffff\020\uffff\001\002\000\022\004\032\006\016" +
    "\010\033\014\025\015\022\016\030\017\031\021\005\001" +
    "\002\000\014\006\016\014\025\015\022\016\030\017\031" +
    "\001\002\000\006\013\ufffc\020\ufffc\001\002\000\024\005" +
    "\ufff4\006\ufff4\007\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\001\002\000\006\013\ufffa\020\ufffa\001" +
    "\002\000\034\005\ufff8\006\ufff8\007\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\001\002\000\012\023\064\024\065\025\062" +
    "\026\066\001\002\000\024\005\ufff3\006\ufff3\007\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\001\002" +
    "\000\024\005\ufff6\006\ufff6\007\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\001\002\000\006\013\ufffd" +
    "\020\ufffd\001\002\000\006\013\ufffb\020\ufffb\001\002\000" +
    "\034\005\ufff7\006\ufff7\007\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\001\002\000\026\005\ufff5\006\ufff5\007\ufff5\012\054" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\001" +
    "\002\000\016\005\051\006\016\014\025\015\022\016\030" +
    "\017\031\001\002\000\010\004\036\011\035\014\041\001" +
    "\002\000\006\013\ufff9\020\ufff9\001\002\000\006\013\uffe6" +
    "\020\uffe6\001\002\000\004\014\045\001\002\000\006\011" +
    "\042\022\043\001\002\000\006\011\uffe4\022\uffe4\001\002" +
    "\000\006\011\uffe3\022\uffe3\001\002\000\006\013\uffe7\020" +
    "\uffe7\001\002\000\006\004\036\014\041\001\002\000\006" +
    "\011\uffe5\022\uffe5\001\002\000\004\005\046\001\002\000" +
    "\006\011\uffe2\022\uffe2\001\002\000\016\005\uffec\006\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\001\002\000\016\005" +
    "\053\006\016\014\025\015\022\016\030\017\031\001\002" +
    "\000\006\013\uffe8\020\uffe8\001\002\000\016\005\uffed\006" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\001\002\000\006" +
    "\013\uffe9\020\uffe9\001\002\000\014\006\016\014\025\015" +
    "\022\016\030\017\031\001\002\000\010\007\uffee\013\uffee" +
    "\020\uffee\001\002\000\006\013\060\020\057\001\002\000" +
    "\014\006\016\014\025\015\022\016\030\017\031\001\002" +
    "\000\024\005\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\001\002\000\010\007\uffef" +
    "\013\uffef\020\uffef\001\002\000\004\017\uffdf\001\002\000" +
    "\004\017\067\001\002\000\004\017\uffe1\001\002\000\004" +
    "\017\uffe0\001\002\000\004\017\uffde\001\002\000\004\012" +
    "\070\001\002\000\014\006\016\014\025\015\022\016\030" +
    "\017\031\001\002\000\006\013\072\020\057\001\002\000" +
    "\024\005\ufff1\006\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\001\002\000\006\007\077\020" +
    "\076\001\002\000\006\007\075\020\057\001\002\000\024" +
    "\005\ufff0\006\ufff0\007\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\001\002\000\004\017\100\001\002" +
    "\000\024\005\uffeb\006\uffeb\007\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\001\002\000\006\007\uffea" +
    "\020\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\007\005\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\026\006\016\007\017\010\023\014\020\015\033\021" +
    "\022\022\025\001\001\000\016\006\054\007\017\010\023" +
    "\011\073\012\072\021\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\046\007\017\010\023\013\047\021" +
    "\022\001\001\000\006\016\036\017\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\051" +
    "\007\017\010\023\021\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\054\007\017" +
    "\010\023\011\055\021\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\060\007\017\010\023\021\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\054\007" +
    "\017\010\023\011\070\021\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TargetlinkDataParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TargetlinkDataParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TargetlinkDataParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public static void debug(String message) {
    System.out.println(message);
  }
  
  public void report_error(String message, Object info) {
    System.err.println(message);
  }
 
  /* Change the method report_fatal_error so when it reports a fatal
     error it will display the line and column number of where the
     fatal error occurred in the input as well as the reason for the
     fatal error which is passed into the method in the object
     'message' and then exit.*/
  public void report_fatal_error(String message, Object info) throws Exception {     
      if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) info);
        
        int line = symbol.left+1;
        int column = symbol.right+1;
        
        throw new MDLParserException(message+" at line: "+line+", column: "+column, line, column);
        
      } else {
        throw new MDLParserException(message);
      }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TargetlinkDataParser$actions {
  private final TargetlinkDataParser parser;

  /** Constructor */
  CUP$TargetlinkDataParser$actions(TargetlinkDataParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TargetlinkDataParser$do_action(
    int                        CUP$TargetlinkDataParser$act_num,
    java_cup.runtime.lr_parser CUP$TargetlinkDataParser$parser,
    java.util.Stack            CUP$TargetlinkDataParser$stack,
    int                        CUP$TargetlinkDataParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TargetlinkDataParser$result;

      /* select the action based on the action number */
      switch (CUP$TargetlinkDataParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NumberLiteral ::= FLOAT_LITERAL 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT=l.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(15/*NumberLiteral*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NumberLiteral ::= INT_LITERAL 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT=l.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(15/*NumberLiteral*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Operator ::= DIV 
            {
              String RESULT = null;
		 RESULT="/"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(14/*Operator*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Operator ::= MULT 
            {
              String RESULT = null;
		 RESULT="*"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(14/*Operator*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Operator ::= MINUS 
            {
              String RESULT = null;
		 RESULT="-"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(14/*Operator*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Operator ::= PLUS 
            {
              String RESULT = null;
		 RESULT="+"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(14/*Operator*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListItem ::= LBRACK STRING_LITERAL RBRACK 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		 RESULT = "["+l.toString()+"]"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(13/*ListItem*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListItem ::= STRING_LITERAL 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(13/*ListItem*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListItems ::= ListItem 
            {
              List<String> RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 ArrayList<String> l = new ArrayList<String>();
                 l.add(i);
                 RESULT = l;
               
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(12/*ListItems*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListItems ::= ListItems SEMICOLON ListItem 
            {
              List<String> RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 l.add(i);
                 RESULT = l; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(12/*ListItems*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // List ::= DLBRACE DRBRACE 
            {
              String RESULT = null;
		  RESULT = "{{}}"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(11/*List*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // List ::= DLBRACE ListItems DRBRACE 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		  RESULT = "{{"+StringUtils.concat(l, ";") +"}}"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(11/*List*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Array ::= LBRACK RBRACK 
            {
              String RESULT = null;
		 RESULT = "[]"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(10/*Array*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Array ::= LBRACK LiteralList RBRACK 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		  RESULT = StringUtils.concat(l, " "); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(10/*Array*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Identifiers ::= Identifiers COMMA IDENTIFIER 
            {
              String RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = i1.toString() +","+i2.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(8/*Identifiers*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CompoundIdentifier ::= LBRACE Identifiers RBRACE 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		 RESULT = "{"+i.toString()+"}"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(6/*CompoundIdentifier*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LiteralList ::= Literal 
            {
              List<String> RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 ArrayList<String> list = new ArrayList<String>();
             list.add(l);
             RESULT = list; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(9/*LiteralList*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LiteralList ::= LiteralList Literal 
            {
              List<String> RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 list.add(l);
                RESULT = list; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(9/*LiteralList*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Literals ::= Literal 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(7/*Literals*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Literals ::= Literals COMMA Literal 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l.toString() +","+i.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(7/*Literals*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CompoundLiteral ::= LBRACE Literals RBRACE 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		 RESULT = "{"+l.toString()+"}"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(5/*CompoundLiteral*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CompoundLiteral ::= NumberLiteral Operator IDENTIFIER LPAREN Literals RPAREN 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		 RESULT = n+o+i.toString()+"("+l.toString()+")"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(5/*CompoundLiteral*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CompoundLiteral ::= IDENTIFIER LPAREN Literals RPAREN 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		 RESULT = i.toString()+"("+l.toString()+")"; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(5/*CompoundLiteral*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Literal ::= CompoundIdentifier 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = i.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(4/*Literal*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Literal ::= CompoundLiteral 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = i.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(4/*Literal*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Literal ::= IDENTIFIER 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = i.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(4/*Literal*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Literal ::= STRING_LITERAL 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(4/*Literal*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Literal ::= FLOAT_LITERAL 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(4/*Literal*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Literal ::= INT_LITERAL 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l.toString(); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(4/*Literal*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Value ::= List 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(16/*Value*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Value ::= Array 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = a; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(16/*Value*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Value ::= Struct 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		TargetlinkStruct s = (TargetlinkStruct)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = s; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(16/*Value*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Value ::= Literal 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = l; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(16/*Value*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // KeyValue ::= STRING_LITERAL COMMA Value 
            {
              ImmutablePair RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 RESULT = new ImmutablePair<String, Object>(l.toString(), v); 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(3/*KeyValue*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // KeyValueList ::= KeyValue 
            {
              List<ImmutablePair> RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		ImmutablePair k = (ImmutablePair)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 ArrayList<ImmutablePair> list = new ArrayList<ImmutablePair>();
                     list.add(k);
                     RESULT = list; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(2/*KeyValueList*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // KeyValueList ::= KeyValueList COMMA KeyValue 
            {
              List<ImmutablePair> RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).right;
		List<ImmutablePair> l = (List<ImmutablePair>)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right;
		ImmutablePair k = (ImmutablePair)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).value;
		 l.add(k);
                     RESULT = l; 
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(2/*KeyValueList*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Struct ::= STRUCT LPAREN KeyValueList RPAREN 
            {
              TargetlinkStruct RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		List<ImmutablePair> l = (List<ImmutablePair>)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		 TargetlinkStruct struct = new TargetlinkStruct();
              for (ImmutablePair<String, Object> pair : l) {
                Object value = pair.getSecond();
                if (value instanceof TargetlinkStruct) {
                  struct.addChild(pair.getFirst(), (TargetlinkStruct)value);
                } else if (value instanceof String) {
                  struct.setParameter(pair.getFirst(), (String)value);
                } else {
                  throw new IllegalStateException("Unknown value type.");
                }
              }
              RESULT = struct;
            
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(1/*Struct*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          return CUP$TargetlinkDataParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Struct EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).right;
		TargetlinkStruct start_val = (TargetlinkStruct)((java_cup.runtime.Symbol) CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).value;
		RESULT = start_val;
              CUP$TargetlinkDataParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TargetlinkDataParser$stack.elementAt(CUP$TargetlinkDataParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$TargetlinkDataParser$parser.done_parsing();
          return CUP$TargetlinkDataParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

