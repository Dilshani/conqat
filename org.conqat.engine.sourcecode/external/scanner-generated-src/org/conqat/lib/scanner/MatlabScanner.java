/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

/* 
   This scanner is based on
   
   - Pramod G. Joisha, Abhay Kanhere, Prithviraj Banerjee, U. Nagaraj Shenoy, Alok Choudhary:
     The Design and Implementation of a Parser and Scanner for the MATLAB Language in the MATCH Compiler
   - The MathWorks: MATLABï¿½ 7 Programming Fundamentals
     http://www.mathworks.com/help/techdoc/matlab_product_page2.html
   - own experiments
   
    */

package org.conqat.lib.scanner;

import java.util.EnumSet;
import java.util.Arrays;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/local/conqat-root/lib/org.conqat.lib.scanner/grammars/matlab.flex</tt>
 */
class MatlabScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\2\1\0\1\15\1\1\22\0\1\14\4\0\1\13"+
    "\1\53\1\16\1\56\1\57\1\42\1\41\1\64\1\4\1\6\1\43"+
    "\12\3\1\45\1\65\1\47\1\50\1\51\1\0\1\10\3\11\2\5"+
    "\25\11\1\60\1\44\1\61\1\46\1\12\1\0\1\32\1\31\1\36"+
    "\1\24\1\22\1\17\1\30\1\34\1\25\1\7\1\11\1\26\1\11"+
    "\1\23\1\20\2\11\1\21\1\27\1\37\1\35\1\11\1\33\1\55"+
    "\1\40\1\11\1\62\1\54\1\63\1\52\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\12\5\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\5\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\40\1\41\4\0\1\42\1\43"+
    "\2\0\1\44\1\45\1\46\1\47\1\50\2\7\6\5"+
    "\1\51\5\5\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\5\1\37\1\42\1\0\1\10\1\60\3\5\1\61"+
    "\6\5\1\62\1\63\1\10\3\5\1\64\3\5\1\65"+
    "\7\5\1\66\1\67\2\5\1\70\1\71\1\72\1\73"+
    "\2\5\1\74\1\5\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\330\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\330\0\330\0\330"+
    "\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u017a\0\330\0\330\0\330\0\330\0\330"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\330"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\u061e"+
    "\0\u0654\0\330\0\u068a\0\u06c0\0\330\0\u06f6\0\u072c\0\u0762"+
    "\0\330\0\u0798\0\u07ce\0\330\0\330\0\330\0\330\0\330"+
    "\0\u0804\0\330\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u01b0\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\330\0\330"+
    "\0\330\0\330\0\330\0\330\0\u0a8c\0\330\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u01b0\0\u0b64\0\u0b9a\0\u0bd0\0\u01b0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u01b0\0\u01b0\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u01b0\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u01b0\0\u01b0"+
    "\0\u1074\0\u10aa\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u10e0\0\u1116"+
    "\0\u01b0\0\u114c\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\12"+
    "\1\14\1\12\1\5\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\12\1\25\1\12\1\26\1\27"+
    "\2\12\1\30\2\12\1\31\1\32\1\12\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\13\60\1\63"+
    "\47\60\13\0\1\64\53\0\1\65\1\66\153\0\1\7"+
    "\66\0\1\10\1\0\1\67\1\70\1\71\12\0\1\67"+
    "\1\0\1\67\1\71\43\0\1\10\2\0\1\72\62\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\22\12\14\0\1\12\13\0\1\70\2\0\1\73\7\0"+
    "\1\74\23\0\1\75\1\76\1\77\1\0\1\100\24\0"+
    "\1\12\1\0\1\12\1\0\1\12\5\0\22\12\14\0"+
    "\1\12\10\0\1\15\1\101\1\102\63\15\3\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\4\0\1\12"+
    "\1\103\14\12\1\104\3\12\14\0\1\12\13\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\4\0\20\12"+
    "\1\105\1\12\14\0\1\12\13\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\4\0\3\12\1\106\16\12"+
    "\14\0\1\12\13\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\4\0\4\12\1\107\2\12\1\110\12\12"+
    "\14\0\1\12\13\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\4\0\1\111\21\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\14\12\1\112\5\12\14\0\1\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\7\12\1\113"+
    "\12\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\15\12\1\114\4\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\13\12\1\115\6\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\2\12\1\116\17\12\14\0\1\12\60\0\1\117\65\0"+
    "\1\120\65\0\1\121\65\0\1\122\70\0\1\123\66\0"+
    "\1\124\14\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\1\12\1\125\20\12\14\0\1\12\10\0"+
    "\1\60\2\0\13\60\1\0\47\60\2\0\1\62\101\0"+
    "\1\126\47\0\1\64\2\0\63\64\1\0\1\65\67\0"+
    "\1\127\1\130\34\0\1\130\27\0\1\70\1\0\1\67"+
    "\1\0\1\71\12\0\1\67\1\0\1\67\1\71\43\0"+
    "\1\70\70\0\1\131\61\0\1\102\66\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\2\12\1\132"+
    "\17\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\4\12\1\133\15\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\15\12\1\134\4\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\20\12\1\135\1\12\14\0\1\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\5\12\1\136"+
    "\14\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\10\12\1\137\11\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\6\12\1\140\13\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\1\12\1\141\20\12\14\0\1\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\6\12\1\142"+
    "\13\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\10\12\1\143\7\12\1\144"+
    "\1\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\21\12\1\145\14\0\1\12"+
    "\13\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\4\0\2\12\1\146\17\12\14\0\1\12\13\0\1\127"+
    "\3\0\1\71\15\0\1\71\43\0\1\127\62\0\1\131"+
    "\1\147\1\16\12\131\1\0\50\131\3\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\17\12\1\150"+
    "\2\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\3\12\1\151\16\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\16\12\1\152\3\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\3\12\1\153\16\12\14\0\1\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\20\12\1\154"+
    "\1\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\12\12\1\155\7\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\7\12\1\156\12\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\3\12\1\157\16\12\14\0\1\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\17\12\1\160"+
    "\2\12\14\0\1\12\12\0\1\16\66\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\20\12\1\161"+
    "\1\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\2\12\1\162\17\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\2\12\1\163\17\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\6\12\1\164\13\12\14\0\1\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\17\12\1\165"+
    "\2\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\13\12\1\166\6\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\3\12\1\167\16\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\15\12\1\170\4\12\14\0\1\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\4\0\6\12\1\171"+
    "\13\12\14\0\1\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\14\12\1\172\5\12\14\0"+
    "\1\12\13\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\4\0\4\12\1\173\15\12\14\0\1\12\13\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\4\0"+
    "\1\174\21\12\14\0\1\12\13\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\4\0\15\12\1\175\4\12"+
    "\14\0\1\12\13\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\4\0\7\12\1\176\12\12\14\0\1\12"+
    "\13\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\4\0\1\12\1\177\20\12\14\0\1\12\13\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\4\0\6\12"+
    "\1\200\13\12\14\0\1\12\13\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\4\0\4\12\1\201\15\12"+
    "\14\0\1\12\13\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\4\0\10\12\1\202\11\12\14\0\1\12"+
    "\13\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\4\0\3\12\1\203\16\12\14\0\1\12\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4482];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\1\1\1\11\6\1\3\11\13\1"+
    "\5\11\7\1\10\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\2\0\5\11\1\1\1\11\14\1"+
    "\6\11\1\1\1\11\1\1\1\0\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
	
  /** This set is used to determine if a single quote character starts a string or is a complex
      transpose operator. */
  private static final EnumSet<ETokenType> TRANSPOSE_TYPES = EnumSet
			.copyOf(Arrays.asList(ETokenType.INTEGER_LITERAL,
					ETokenType.FLOATING_POINT_LITERAL,
					ETokenType.IMAGINARY_LITERAL, ETokenType.IDENTIFIER,
					ETokenType.TRANSPOSE, ETokenType.COMPLEX_TRANSPOSE,
					ETokenType.RBRACK, ETokenType.RPAREN));

  private StringBuilder string = new StringBuilder();

  private String originId;
  
  private ETokenType lastTokenType;
  
  private boolean whiteSpaceSinceLastToken=false;
   
  /** 
   * Resets scanner.
   */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    lastTokenType=null;
    whiteSpaceSinceLastToken=false;
    yyreset(reader);
  } 
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  } 
  
  private MatlabToken token(ETokenType type) {
  	return new MatlabToken(type, yychar, yyline, yytext(), originId);
  }
  
   /**
   * Wrapper to store last token.
   */
  public MatlabToken getNextToken() throws java.io.IOException {
  	MatlabToken token = yyGetNextToken();
  	lastTokenType=token.getType();
  	whiteSpaceSinceLastToken=false;
  	return token;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MatlabScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MatlabScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MatlabToken yyGetNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          { return token(ETokenType.EQEQ);
          }
        case 62: break;
        case 59: 
          { return token(ETokenType.GLOBAL);
          }
        case 63: break;
        case 57: 
          { return token(ETokenType.ELSEIF);
          }
        case 64: break;
        case 32: 
          { yybegin(YYINITIAL);
                                   return new MatlabToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 65: break;
        case 33: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return new MatlabToken(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 66: break;
        case 25: 
          { return token(ETokenType.LBRACK);
          }
        case 67: break;
        case 19: 
          { return token(ETokenType.GT);
          }
        case 68: break;
        case 39: 
          { return token(ETokenType.LEFT_DIV);
          }
        case 69: break;
        case 7: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 2;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 3;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return token(ETokenType.END_OF_LINE_COMMENT);
          }
        case 70: break;
        case 44: 
          { return token(ETokenType.GTEQ);
          }
        case 71: break;
        case 6: 
          { return token(ETokenType.DOT);
          }
        case 72: break;
        case 17: 
          { return token(ETokenType.LT);
          }
        case 73: break;
        case 58: 
          { return token(ETokenType.SWITCH);
          }
        case 74: break;
        case 23: 
          { return token(ETokenType.LPAREN);
          }
        case 75: break;
        case 61: 
          { return token(ETokenType.OTHERWISE);
          }
        case 76: break;
        case 5: 
          { return token(ETokenType.IDENTIFIER);
          }
        case 77: break;
        case 15: 
          { return token(ETokenType.COLON);
          }
        case 78: break;
        case 28: 
          { return token(ETokenType.RBRACE);
          }
        case 79: break;
        case 54: 
          { return token(ETokenType.WHILE);
          }
        case 80: break;
        case 11: 
          { return token(ETokenType.PLUS);
          }
        case 81: break;
        case 46: 
          { return token(ETokenType.ANDAND);
          }
        case 82: break;
        case 34: 
          { return token(ETokenType.FLOATING_POINT_LITERAL);
          }
        case 83: break;
        case 35: 
          { return token(ETokenType.IMAGINARY_LITERAL);
          }
        case 84: break;
        case 21: 
          { return token(ETokenType.AND);
          }
        case 85: break;
        case 53: 
          { return token(ETokenType.CASE);
          }
        case 86: break;
        case 50: 
          { return token(ETokenType.TRY);
          }
        case 87: break;
        case 49: 
          { if (lastTokenType == ETokenType.EOL || lastTokenType == ETokenType.SEMICOLON ) 
	                       return token(ETokenType.END); 
	                else return token(ETokenType.IDENTIFIER);
          }
        case 88: break;
        case 52: 
          { return token(ETokenType.ELSE);
          }
        case 89: break;
        case 36: 
          { return token(ETokenType.TRANSPOSE);
          }
        case 90: break;
        case 38: 
          { return token(ETokenType.RIGHT_DIV);
          }
        case 91: break;
        case 37: 
          { return token(ETokenType.MULT);
          }
        case 92: break;
        case 4: 
          { return token(ETokenType.MINUS);
          }
        case 93: break;
        case 41: 
          { return token(ETokenType.IF);
          }
        case 94: break;
        case 26: 
          { return token(ETokenType.RBRACK);
          }
        case 95: break;
        case 14: 
          { return token(ETokenType.MATRIX_LEFT_DIV);
          }
        case 96: break;
        case 55: 
          { return token(ETokenType.CATCH);
          }
        case 97: break;
        case 45: 
          { return token(ETokenType.NOTEQ);
          }
        case 98: break;
        case 16: 
          { return token(ETokenType.MATRIX_POWER);
          }
        case 99: break;
        case 1: 
          { return token(ETokenType.ILLEGAL_CHARACTER);
          }
        case 100: break;
        case 30: 
          { return token(ETokenType.SEMICOLON);
          }
        case 101: break;
        case 22: 
          { return token(ETokenType.OR);
          }
        case 102: break;
        case 60: 
          { return token(ETokenType.FUNCTION);
          }
        case 103: break;
        case 18: 
          { return token(ETokenType.EQ);
          }
        case 104: break;
        case 24: 
          { return token(ETokenType.RPAREN);
          }
        case 105: break;
        case 29: 
          { return token(ETokenType.COMMA);
          }
        case 106: break;
        case 40: 
          { return token(ETokenType.POWER);
          }
        case 107: break;
        case 8: 
          { whiteSpaceSinceLastToken=true;
          }
        case 108: break;
        case 42: 
          { return token(ETokenType.LTEQ);
          }
        case 109: break;
        case 27: 
          { return token(ETokenType.LBRACE);
          }
        case 110: break;
        case 12: 
          { return token(ETokenType.MATRIX_MULT);
          }
        case 111: break;
        case 2: 
          { return token(ETokenType.EOL);
          }
        case 112: break;
        case 47: 
          { return token(ETokenType.OROR);
          }
        case 113: break;
        case 48: 
          { return token(ETokenType.FOR);
          }
        case 114: break;
        case 10: 
          { //this also work if lastTokenType is null
      if (TRANSPOSE_TYPES.contains(lastTokenType) && !whiteSpaceSinceLastToken) {
      	return token(ETokenType.COMPLEX_TRANSPOSE);
      } 
      
      //start string
      yybegin(STRING); string.setLength(0); string.append(yytext());
          }
        case 115: break;
        case 20: 
          { return token(ETokenType.COMP);
          }
        case 116: break;
        case 31: 
          { string.append( yytext() );
          }
        case 117: break;
        case 51: 
          { return token(ETokenType.XOR);
          }
        case 118: break;
        case 9: 
          { yyline -= 1;
          }
        case 119: break;
        case 3: 
          { return token(ETokenType.INTEGER_LITERAL);
          }
        case 120: break;
        case 13: 
          { return token(ETokenType.MATRIX_RIGHT_DIV);
          }
        case 121: break;
        case 56: 
          { return token(ETokenType.RETURN);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL);
                                   return new MatlabToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 132: break;
            default:
              {
                return token(ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
