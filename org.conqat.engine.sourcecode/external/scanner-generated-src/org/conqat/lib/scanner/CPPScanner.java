/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */


/* This scanner grammar is based on the Java scanner grammar.
   It is a quick hack and far from correct. */

package org.conqat.lib.scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/local/conqat-root/lib/org.conqat.lib.scanner/grammars/cpp.flex</tt>
 */
class CPPScanner extends QueuedScannerBase<CPPToken> {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR_IGNORE_IF_NULL = 8;
  public static final int STRING = 2;
  public static final int BACKTICK_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int PREPROCESSOR_DIRECTIVE = 10;
  public static final int STRING_IN_PREPROCESSOR = 12;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\5\1\2\1\0\1\6\1\1\16\30\4\0\1\4\1\12"+
    "\1\26\1\7\1\27\1\105\1\102\1\44\1\65\1\66\1\11\1\43"+
    "\1\74\1\75\1\41\1\10\1\15\1\36\2\35\4\37\2\31\1\101"+
    "\1\73\1\24\1\76\1\25\1\100\1\0\3\34\1\40\1\42\1\40"+
    "\5\27\1\32\10\27\1\32\2\27\1\33\2\27\1\71\1\3\1\72"+
    "\1\104\1\27\1\106\1\45\1\50\1\17\1\22\1\23\1\14\1\57"+
    "\1\54\1\13\1\27\1\52\1\20\1\55\1\16\1\47\1\61\1\27"+
    "\1\51\1\53\1\46\1\21\1\62\1\60\1\56\1\64\1\63\1\67"+
    "\1\103\1\70\1\77\41\30\2\0\4\27\4\0\1\27\2\0\1\30"+
    "\7\0\1\27\4\0\1\27\5\0\27\27\1\0\37\27\1\0\u01ca\27"+
    "\4\0\14\27\16\0\5\27\7\0\1\27\1\0\1\27\21\0\160\30"+
    "\5\27\1\0\2\27\2\0\4\27\10\0\1\27\1\0\3\27\1\0"+
    "\1\27\1\0\24\27\1\0\123\27\1\0\213\27\1\0\5\30\2\0"+
    "\236\27\11\0\46\27\2\0\1\27\7\0\47\27\11\0\55\30\1\0"+
    "\1\30\1\0\2\30\1\0\2\30\1\0\1\30\10\0\33\27\5\0"+
    "\3\27\15\0\4\30\7\0\1\27\4\0\13\30\5\0\53\27\37\30"+
    "\4\0\2\27\1\30\143\27\1\0\1\27\10\30\1\0\6\30\2\27"+
    "\2\30\1\0\4\30\2\27\12\30\3\27\2\0\1\27\17\0\1\30"+
    "\1\27\1\30\36\27\33\30\2\0\131\27\13\30\1\27\16\0\12\30"+
    "\41\27\11\30\2\27\4\0\1\27\5\0\26\27\4\30\1\27\11\30"+
    "\1\27\3\30\1\27\5\30\22\0\31\27\3\30\244\0\4\30\66\27"+
    "\3\30\1\27\22\30\1\27\7\30\12\27\2\30\2\0\12\30\1\0"+
    "\7\27\1\0\7\27\1\0\3\30\1\0\10\27\2\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\1\27\3\0\4\27\2\0\1\30\1\27"+
    "\7\30\2\0\2\30\2\0\3\30\1\27\10\0\1\30\4\0\2\27"+
    "\1\0\3\27\2\30\2\0\12\30\4\27\7\0\1\27\5\0\3\30"+
    "\1\0\6\27\4\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\27\1\0\2\27\2\0\1\30\1\0\5\30\4\0\2\30"+
    "\2\0\3\30\3\0\1\30\7\0\4\27\1\0\1\27\7\0\14\30"+
    "\3\27\1\30\13\0\3\30\1\0\11\27\1\0\3\27\1\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27\10\30"+
    "\1\0\3\30\1\0\3\30\2\0\1\27\17\0\2\27\2\30\2\0"+
    "\12\30\1\0\1\27\17\0\3\30\1\0\10\27\2\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27"+
    "\7\30\2\0\2\30\2\0\3\30\10\0\2\30\4\0\2\27\1\0"+
    "\3\27\2\30\2\0\12\30\1\0\1\27\20\0\1\30\1\27\1\0"+
    "\6\27\3\0\3\27\1\0\4\27\3\0\2\27\1\0\1\27\1\0"+
    "\2\27\3\0\2\27\3\0\3\27\3\0\14\27\4\0\5\30\3\0"+
    "\3\30\1\0\4\30\2\0\1\27\6\0\1\30\16\0\12\30\11\0"+
    "\1\27\7\0\3\30\1\0\10\27\1\0\3\27\1\0\27\27\1\0"+
    "\12\27\1\0\5\27\3\0\1\27\7\30\1\0\3\30\1\0\4\30"+
    "\7\0\2\30\1\0\2\27\6\0\2\27\2\30\2\0\12\30\22\0"+
    "\2\30\1\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0"+
    "\5\27\2\0\1\30\1\27\7\30\1\0\3\30\1\0\4\30\7\0"+
    "\2\30\7\0\1\27\1\0\2\27\2\30\2\0\12\30\1\0\2\27"+
    "\17\0\2\30\1\0\10\27\1\0\3\27\1\0\51\27\2\0\1\27"+
    "\7\30\1\0\3\30\1\0\4\30\1\27\10\0\1\30\10\0\2\27"+
    "\2\30\2\0\12\30\12\0\6\27\2\0\2\30\1\0\22\27\3\0"+
    "\30\27\1\0\11\27\1\0\1\27\2\0\7\27\3\0\1\30\4\0"+
    "\6\30\1\0\1\30\1\0\10\30\22\0\2\30\15\0\60\27\1\30"+
    "\2\27\7\30\4\0\10\27\10\30\1\0\12\30\47\0\2\27\1\0"+
    "\1\27\2\0\2\27\1\0\1\27\2\0\1\27\6\0\4\27\1\0"+
    "\7\27\1\0\3\27\1\0\1\27\1\0\1\27\2\0\2\27\1\0"+
    "\4\27\1\30\2\27\6\30\1\0\2\30\1\27\2\0\5\27\1\0"+
    "\1\27\1\0\6\30\2\0\12\30\2\0\2\27\42\0\1\27\27\0"+
    "\2\30\6\0\12\30\13\0\1\30\1\0\1\30\1\0\1\30\4\0"+
    "\2\30\10\27\1\0\44\27\4\0\24\30\1\0\2\30\5\27\13\30"+
    "\1\0\44\30\11\0\1\30\71\0\53\27\24\30\1\27\12\30\6\0"+
    "\6\27\4\30\4\27\3\30\1\27\3\30\2\27\7\30\3\27\4\30"+
    "\15\27\14\30\1\27\17\30\2\0\46\27\12\0\53\27\1\0\1\27"+
    "\3\0\u0149\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\51\27\1\0\4\27\2\0\41\27\1\0\4\27\2\0\7\27"+
    "\1\0\1\27\1\0\4\27\2\0\17\27\1\0\71\27\1\0\4\27"+
    "\2\0\103\27\2\0\3\30\40\0\20\27\20\0\125\27\14\0\u026c\27"+
    "\2\0\21\27\1\0\32\27\5\0\113\27\3\0\3\27\17\0\15\27"+
    "\1\0\4\27\3\30\13\0\22\27\3\30\13\0\22\27\2\30\14\0"+
    "\15\27\1\0\3\27\1\0\2\30\14\0\64\27\40\30\3\0\1\27"+
    "\3\0\2\27\1\30\2\0\12\30\41\0\3\30\2\0\12\30\6\0"+
    "\130\27\10\0\51\27\1\30\1\27\5\0\106\27\12\0\35\27\3\0"+
    "\14\30\4\0\14\30\12\0\12\30\36\27\2\0\5\27\13\0\54\27"+
    "\4\0\21\30\7\27\2\30\6\0\12\30\46\0\27\27\5\30\4\0"+
    "\65\27\12\30\1\0\35\30\2\0\13\30\6\0\12\30\15\0\1\27"+
    "\130\0\5\30\57\27\21\30\7\27\4\0\12\30\21\0\11\30\14\0"+
    "\3\30\36\27\12\30\3\0\2\27\12\30\6\0\46\27\16\30\14\0"+
    "\44\27\24\30\10\0\12\30\3\0\3\27\12\30\44\27\122\0\3\30"+
    "\1\0\25\30\4\27\1\30\4\27\1\30\15\0\300\27\47\30\25\0"+
    "\4\30\u0116\27\2\0\6\27\2\0\46\27\2\0\6\27\2\0\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0\65\27"+
    "\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0\4\27"+
    "\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27\16\0\5\30"+
    "\32\0\5\30\20\0\2\27\23\0\1\27\13\0\5\30\5\0\6\30"+
    "\1\0\1\27\15\0\1\27\20\0\15\27\3\0\32\27\26\0\15\30"+
    "\4\0\1\30\3\0\14\30\21\0\1\27\4\0\1\27\2\0\12\27"+
    "\1\0\1\27\3\0\5\27\6\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0\1\27"+
    "\21\0\51\27\u0a77\0\57\27\1\0\57\27\1\0\205\27\6\0\4\27"+
    "\3\30\16\0\46\27\12\0\66\27\11\0\1\27\17\0\1\30\27\27"+
    "\11\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\40\30\57\0\1\27"+
    "\u01d5\0\3\27\31\0\11\27\6\30\1\0\5\27\2\0\5\27\4\0"+
    "\126\27\2\0\2\30\2\0\3\27\1\0\132\27\1\0\4\27\5\0"+
    "\51\27\3\0\136\27\21\0\33\27\65\0\20\27\u0200\0\u19b6\27\112\0"+
    "\u51cc\27\64\0\u048d\27\103\0\56\27\2\0\u010d\27\3\0\20\27\12\30"+
    "\2\27\24\0\57\27\1\30\14\0\2\30\1\0\31\27\10\0\120\27"+
    "\2\30\45\0\11\27\2\0\147\27\2\0\4\27\1\0\2\27\16\0"+
    "\12\27\120\0\10\27\1\30\3\27\1\30\4\27\1\30\27\27\5\30"+
    "\20\0\1\27\7\0\64\27\14\0\2\30\62\27\21\30\13\0\12\30"+
    "\6\0\22\30\6\27\3\0\1\27\4\0\12\30\34\27\10\30\2\0"+
    "\27\27\15\30\14\0\35\27\3\0\4\30\57\27\16\30\16\0\1\27"+
    "\12\30\46\0\51\27\16\30\11\0\3\27\1\30\10\27\2\30\2\0"+
    "\12\30\6\0\27\27\3\0\1\27\1\30\4\0\60\27\1\30\1\27"+
    "\3\30\2\27\2\30\5\27\2\30\1\27\1\30\1\27\30\0\3\27"+
    "\43\0\6\27\2\0\6\27\2\0\6\27\11\0\7\27\1\0\7\27"+
    "\221\0\43\27\10\30\1\0\2\30\2\0\12\30\6\0\u2ba4\27\14\0"+
    "\27\27\4\0\61\27\u2104\0\u012e\27\2\0\76\27\2\0\152\27\46\0"+
    "\7\27\14\0\5\27\5\0\1\27\1\30\12\27\1\0\15\27\1\0"+
    "\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\154\27\41\0"+
    "\u016b\27\22\0\100\27\2\0\66\27\50\0\15\27\3\0\20\30\20\0"+
    "\7\30\14\0\2\27\30\0\3\27\31\0\1\27\6\0\5\27\1\0"+
    "\207\27\2\0\1\30\4\0\1\27\13\0\12\30\7\0\32\27\4\0"+
    "\1\27\1\0\32\27\13\0\131\27\3\0\6\27\2\0\6\27\2\0"+
    "\6\27\2\0\3\27\3\0\2\27\3\0\2\27\22\0\3\30\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\2\7\1\10\6\7\1\11\1\12\1\13\1\7"+
    "\1\10\1\14\1\15\1\16\12\7\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\42\1\1\1\43\1\41\2\44\1\1\1\45\1\41"+
    "\2\46\1\47\3\50\2\51\3\50\1\52\1\50\1\53"+
    "\4\0\1\2\2\0\1\54\1\0\2\55\1\56\1\0"+
    "\1\57\1\60\1\61\1\62\5\7\1\63\2\10\1\0"+
    "\1\63\1\0\3\10\1\63\12\7\1\64\3\7\1\65"+
    "\1\66\1\67\1\70\1\71\1\0\1\72\1\73\22\7"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\2\41\1\110\1\111\1\112"+
    "\1\113\1\114\2\41\1\115\1\116\1\117\1\120\1\121"+
    "\1\107\1\122\1\123\1\124\4\0\1\50\1\0\1\50"+
    "\3\0\1\125\1\0\1\2\2\0\2\55\2\56\2\0"+
    "\1\7\1\126\2\7\1\127\1\7\1\10\1\63\1\0"+
    "\4\10\1\130\20\7\1\131\1\132\1\133\1\134\3\7"+
    "\1\135\26\7\1\136\1\41\4\0\2\125\4\0\1\137"+
    "\1\55\2\0\1\140\3\7\3\10\3\7\1\141\2\7"+
    "\1\142\1\143\6\7\1\144\1\145\1\7\1\146\1\147"+
    "\1\7\1\150\1\151\15\7\1\152\5\7\1\153\1\7"+
    "\3\0\1\154\1\137\1\55\1\0\1\7\1\155\1\7"+
    "\3\10\1\7\1\156\1\157\1\7\1\160\1\161\1\7"+
    "\1\162\5\7\1\163\3\7\1\164\7\7\1\165\1\7"+
    "\1\166\5\7\2\0\1\55\1\167\1\170\1\171\3\10"+
    "\4\7\1\172\1\173\1\174\5\7\1\175\1\7\1\176"+
    "\1\177\1\200\1\201\1\202\1\203\4\7\1\204\1\205"+
    "\1\55\3\10\3\7\1\206\2\7\1\207\3\7\1\210"+
    "\1\7\1\211\1\7\1\55\3\10\1\7\1\212\1\213"+
    "\1\214\1\215\1\216\1\7\1\217\1\7\1\220\2\0"+
    "\3\10\1\221\1\7\1\222\2\0\3\10\1\223\1\224"+
    "\1\0\2\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\10\1\63\1\0"+
    "\5\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[490];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u01f1\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u01f1\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u01f1\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u01f1\0\u0b18\0\u0b5f\0\u01f1\0\u01f1\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u01f1\0\u0d09\0\u0d50\0\u01f1"+
    "\0\u0d97\0\u01f1\0\u0dde\0\u0e25\0\u01f1\0\u0e6c\0\u01f1\0\u0eb3"+
    "\0\u0efa\0\u01f1\0\u01f1\0\u01f1\0\u0f41\0\u0f88\0\u0fcf\0\u01f1"+
    "\0\u1016\0\u105d\0\u10a4\0\u01f1\0\u10eb\0\u01f1\0\u027f\0\u1132"+
    "\0\u1179\0\u02c6\0\u11c0\0\u1207\0\u11c0\0\u01f1\0\u124e\0\u1295"+
    "\0\u12dc\0\u1323\0\u136a\0\u01f1\0\u01f1\0\u01f1\0\u0736\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u01f1\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u01f1\0\u1bbc\0\u01f1"+
    "\0\u01f1\0\u1c03\0\u01f1\0\u01f1\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f"+
    "\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u218f\0\u01f1\0\u01f1\0\u01f1\0\u21d6\0\u01f1"+
    "\0\u01f1\0\u21d6\0\u221d\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1"+
    "\0\u2264\0\u01f1\0\u01f1\0\u01f1\0\u0f41\0\u22ab\0\u22f2\0\u2339"+
    "\0\u2380\0\u23c7\0\u240e\0\u105d\0\u2455\0\u249c\0\u24e3\0\u252a"+
    "\0\u1179\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u01f1\0\u26d4"+
    "\0\u271b\0\u2762\0\u0736\0\u27a9\0\u27f0\0\u0736\0\u2837\0\u01f1"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u0736\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u01f1"+
    "\0\u2e98\0\u01f1\0\u01f1\0\u2edf\0\u2f26\0\u2f6d\0\u0736\0\u2fb4"+
    "\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec"+
    "\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424"+
    "\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u01f1\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u01f1\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u12dc\0\u3894\0\u38db\0\u3922\0\u01f1\0\u3969\0\u39b0"+
    "\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u0736"+
    "\0\u3be8\0\u3c2f\0\u0736\0\u0736\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b"+
    "\0\u3d92\0\u3dd9\0\u0736\0\u0736\0\u3e20\0\u01f1\0\u0736\0\u3e67"+
    "\0\u0736\0\u0736\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u0736"+
    "\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u0736\0\u43ac\0\u43f3"+
    "\0\u443a\0\u4481\0\u01f1\0\u01f1\0\u44c8\0\u450f\0\u4556\0\u0736"+
    "\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u0736\0\u0736\0\u4700"+
    "\0\u0736\0\u0736\0\u4747\0\u0736\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u48aa\0\u0736\0\u48f1\0\u4938\0\u497f\0\u0736\0\u49c6\0\u4a0d"+
    "\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u0736\0\u4bb7\0\u0736"+
    "\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8\0\u4def"+
    "\0\u01f1\0\u0736\0\u0736\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52"+
    "\0\u4f99\0\u4fe0\0\u0736\0\u0736\0\u0736\0\u5027\0\u506e\0\u50b5"+
    "\0\u50fc\0\u5143\0\u0736\0\u518a\0\u0736\0\u0736\0\u0736\0\u0736"+
    "\0\u0736\0\u0736\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u01f1\0\u01f1"+
    "\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\u0736"+
    "\0\u54de\0\u5525\0\u0736\0\u556c\0\u55b3\0\u55fa\0\u0736\0\u5641"+
    "\0\u0736\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u0736"+
    "\0\u0736\0\u0736\0\u0736\0\u0736\0\u5832\0\u0736\0\u5879\0\u0736"+
    "\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u0736\0\u5a23\0\u0736"+
    "\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86\0\u0736\0\u01f1\0\u5bcd"+
    "\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77\0\u5dbe\0\u5e05"+
    "\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u5f68\0\u5faf\0\u5ff6\0\u603d"+
    "\0\u6084\0\u60cb\0\u6112\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e"+
    "\0\u6275\0\u62bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[490];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\2\12\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\10"+
    "\1\36\3\35\3\36\1\35\1\37\1\35\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\35\1\47\3\35"+
    "\1\50\1\51\1\52\1\53\2\35\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\22\76\1\102\60\76\1\103\1\104"+
    "\1\105\1\106\40\103\1\107\42\103\1\110\1\111\1\112"+
    "\1\106\102\110\1\113\7\114\1\115\1\116\77\114\1\117"+
    "\1\120\1\121\3\114\1\122\1\123\15\114\1\124\60\114"+
    "\1\76\1\111\1\112\1\125\22\76\1\126\60\76\110\0"+
    "\1\127\1\12\1\130\2\127\1\0\1\131\100\0\2\127"+
    "\1\130\2\127\1\0\1\131\100\0\1\11\1\12\1\0"+
    "\1\132\103\0\2\133\1\134\2\135\1\0\1\136\1\137"+
    "\2\0\1\140\1\141\1\0\6\141\3\0\1\141\2\0"+
    "\3\141\3\0\1\141\1\0\1\141\2\0\20\141\32\0"+
    "\1\142\1\143\64\0\1\144\106\0\1\145\106\0\1\146"+
    "\23\0\1\35\1\147\1\35\1\150\5\35\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\5\35\1\151\3\35"+
    "\3\0\12\35\1\0\1\35\2\0\1\152\1\35\1\153"+
    "\1\35\1\154\13\35\36\0\1\155\1\156\2\0\2\157"+
    "\1\155\1\160\5\0\1\161\1\157\1\162\1\0\1\163"+
    "\1\164\1\165\1\155\1\166\1\160\13\0\1\162\43\0"+
    "\10\35\1\167\3\0\12\35\1\0\1\35\2\0\1\170"+
    "\17\35\35\0\5\35\1\171\3\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\172\1\35\1\173\4\35\1\174\10\35"+
    "\35\0\11\35\3\0\12\35\1\0\1\35\2\0\2\35"+
    "\1\175\15\35\35\0\3\35\1\176\5\35\3\0\12\35"+
    "\1\0\1\35\2\0\6\35\1\177\11\35\35\0\10\35"+
    "\1\200\3\0\12\35\1\0\1\35\2\0\2\35\1\201"+
    "\15\35\35\0\3\35\1\202\1\35\1\203\3\35\3\0"+
    "\12\35\1\0\1\35\2\0\11\35\1\204\6\35\46\0"+
    "\1\205\51\0\1\206\35\0\1\207\50\0\1\210\23\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\20\35\36\0"+
    "\1\155\1\36\2\0\2\157\1\155\1\160\5\0\1\36"+
    "\1\157\2\0\3\36\1\155\1\166\1\160\55\0\1\211"+
    "\3\0\1\166\13\0\1\166\3\0\3\166\1\0\1\212"+
    "\110\0\1\213\32\0\1\214\23\0\6\35\1\215\2\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\10\35"+
    "\1\216\3\0\12\35\1\0\1\35\2\0\4\35\1\217"+
    "\2\35\1\220\7\35\1\221\35\0\11\35\3\0\12\35"+
    "\1\0\1\35\2\0\14\35\1\222\3\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\4\35\1\223\13\35"+
    "\35\0\10\35\1\224\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\1\225\10\35\3\0\12\35\1\0\1\35"+
    "\2\0\1\35\1\226\5\35\1\227\3\35\1\230\4\35"+
    "\35\0\11\35\3\0\12\35\1\0\1\35\2\0\2\35"+
    "\1\231\15\35\35\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\7\35\1\232\10\35\35\0\6\35\1\233\2\35"+
    "\3\0\12\35\1\0\1\35\2\0\4\35\1\234\13\35"+
    "\35\0\1\235\10\35\3\0\12\35\1\0\1\35\2\0"+
    "\2\35\1\236\15\35\47\0\1\237\47\0\1\240\1\241"+
    "\106\0\1\242\111\0\1\243\103\0\1\244\3\0\1\245"+
    "\102\0\1\246\4\0\1\247\101\0\1\250\106\0\1\251"+
    "\10\0\1\76\3\0\22\76\1\0\60\76\2\0\1\100"+
    "\104\0\1\252\1\253\1\254\1\255\10\252\1\256\1\257"+
    "\1\260\7\252\1\261\6\252\2\262\1\263\4\252\1\264"+
    "\1\265\1\266\1\252\1\267\1\270\4\252\1\271\2\252"+
    "\1\272\1\273\15\252\1\274\6\252\1\103\3\0\40\103"+
    "\1\0\42\103\2\0\1\105\104\0\2\252\1\0\1\255"+
    "\10\252\1\256\1\257\1\260\7\252\1\261\6\252\2\262"+
    "\1\263\4\252\1\264\1\265\1\266\1\252\1\267\1\270"+
    "\4\252\1\271\2\252\1\272\1\273\15\252\1\274\6\252"+
    "\1\110\3\0\102\110\3\0\1\112\105\0\2\275\1\276"+
    "\2\275\2\0\1\277\12\0\1\300\73\0\1\301\1\302"+
    "\77\0\1\120\105\0\1\303\1\114\105\0\2\304\1\305"+
    "\2\304\2\0\1\306\106\0\1\307\1\310\75\0\1\254"+
    "\1\303\1\114\104\254\1\0\2\127\1\0\1\130\103\0"+
    "\2\311\1\312\2\131\102\0\2\133\1\134\2\135\2\0"+
    "\1\137\2\0\1\140\1\141\1\0\6\141\3\0\1\141"+
    "\2\0\3\141\3\0\1\141\1\0\1\141\2\0\20\141"+
    "\23\0\2\135\1\0\1\134\112\0\1\142\1\313\110\0"+
    "\1\141\1\314\1\141\1\315\5\141\3\0\12\141\1\0"+
    "\1\141\2\0\20\141\35\0\11\141\3\0\12\141\1\0"+
    "\1\141\2\0\20\141\22\0\1\142\1\316\1\317\104\142"+
    "\11\320\1\321\75\320\13\0\5\35\1\322\3\35\3\0"+
    "\12\35\1\0\1\35\2\0\1\35\1\323\16\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\2\35\1\324"+
    "\15\35\35\0\5\35\1\325\3\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\4\35\1\326\13\35\35\0\1\327\10\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\36\0\1\155"+
    "\1\156\2\0\2\157\1\155\1\160\5\0\1\161\1\157"+
    "\2\0\1\163\1\164\1\165\1\155\1\166\1\160\64\0"+
    "\2\330\10\0\1\330\71\0\1\331\13\0\1\331\3\0"+
    "\3\331\3\0\1\332\31\0\1\332\25\0\1\155\1\161"+
    "\4\0\1\155\1\160\5\0\1\161\3\0\3\161\1\155"+
    "\1\166\1\160\60\0\1\333\1\334\1\0\1\333\2\0"+
    "\2\333\5\0\1\333\2\0\5\333\1\0\1\333\2\0"+
    "\1\333\2\0\1\333\52\0\1\155\1\335\2\0\2\157"+
    "\1\155\1\160\5\0\1\161\1\157\2\0\3\335\1\155"+
    "\1\166\1\160\60\0\1\155\1\165\2\0\2\157\1\155"+
    "\1\160\5\0\1\161\1\157\2\0\3\165\1\155\1\166"+
    "\1\160\60\0\1\155\1\336\2\0\2\157\1\155\1\160"+
    "\5\0\1\161\1\157\2\0\3\336\1\155\1\166\1\160"+
    "\60\0\1\155\1\166\4\0\1\155\1\160\5\0\1\166"+
    "\3\0\3\166\1\155\1\0\1\160\57\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\13\35\1\337\4\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\10\35\1\340"+
    "\7\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\341\17\35\35\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\1\35\1\342\4\35\1\343\11\35\35\0\3\35"+
    "\1\344\5\35\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\11\35\3\0\12\35\1\0\1\35\2\0\1\345"+
    "\17\35\35\0\3\35\1\346\5\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\1\347\10\35\3\0\12\35"+
    "\1\0\1\35\2\0\6\35\1\350\11\35\35\0\1\351"+
    "\10\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\1\35\1\352\3\35\1\353\3\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\6\35\1\354\2\35\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\6\35\1\355"+
    "\2\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\6\35\1\356"+
    "\11\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\35\1\357\16\35\120\0\1\360\35\0\1\361\50\0"+
    "\1\362\51\0\1\363\60\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\35\1\364\16\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\10\35\1\365\7\35\35\0"+
    "\6\35\1\366\2\35\3\0\12\35\1\0\1\35\2\0"+
    "\17\35\1\367\35\0\1\370\10\35\3\0\12\35\1\0"+
    "\1\35\2\0\4\35\1\371\13\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\14\35\1\372\3\35\35\0"+
    "\10\35\1\373\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\10\35\1\374\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\7\35\1\375\1\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\35\1\376\10\35\1\377\5\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\12\35\1\u0100"+
    "\3\35\1\u0101\1\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\u0102\3\35\1\u0103\13\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\2\35\1\u0104\15\35"+
    "\35\0\1\u0105\10\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\35\1\u0106\16\35\35\0\1\u0107\10\35\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\11\35\3\0\12\35"+
    "\1\0\1\35\2\0\3\35\1\u0108\14\35\35\0\1\u0109"+
    "\10\35\3\0\12\35\1\0\1\35\2\0\2\35\1\u010a"+
    "\15\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\4\35\1\u010b\13\35\35\0\1\u010c\4\35\1\u010d\3\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\33\0\1\u010e"+
    "\77\0\1\254\121\0\1\263\17\0\3\263\64\0\1\254"+
    "\17\0\3\254\63\0\2\u010f\1\0\1\u010f\2\0\2\u010f"+
    "\5\0\1\u010f\2\0\5\u010f\1\0\1\u010f\2\0\1\u010f"+
    "\2\0\1\u010f\37\0\2\275\1\0\1\276\112\0\1\301"+
    "\1\u0110\113\0\1\u0111\70\0\1\301\1\303\1\114\104\301"+
    "\11\302\1\u0112\75\302\2\0\1\114\105\0\2\304\1\0"+
    "\1\305\112\0\1\307\1\u0113\75\0\1\307\1\u0114\1\u0115"+
    "\104\307\11\u0116\1\u0117\75\u0116\1\0\2\131\1\0\1\312"+
    "\102\0\11\320\1\0\75\320\1\0\2\u0118\1\u0119\2\u0118"+
    "\5\0\2\141\1\u011a\6\141\3\0\12\141\1\0\1\141"+
    "\2\0\20\141\35\0\4\141\1\u011b\4\141\3\0\12\141"+
    "\1\0\1\141\2\0\20\141\24\0\1\317\104\0\11\320"+
    "\1\u011c\75\320\10\u011d\1\u011e\1\321\75\u011d\13\0\1\u011f"+
    "\10\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\1\u0120\17\35"+
    "\35\0\11\35\3\0\12\35\1\0\1\35\2\0\6\35"+
    "\1\366\11\35\35\0\10\35\1\u0121\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\36\0\1\155\1\331\4\0\1\155"+
    "\6\0\1\331\3\0\3\331\1\155\63\0\1\331\13\0"+
    "\1\331\3\0\3\331\63\0\2\u0122\1\0\1\u0122\2\157"+
    "\2\u0122\5\0\1\u0122\1\157\1\0\5\u0122\1\0\1\u0122"+
    "\2\0\1\u0122\2\0\1\u0122\52\0\1\333\1\334\1\0"+
    "\1\333\2\157\2\333\5\0\1\333\1\157\1\0\5\333"+
    "\1\0\1\333\2\0\1\333\2\0\1\333\52\0\1\155"+
    "\1\u0123\2\0\2\157\1\155\1\160\5\0\1\161\1\157"+
    "\2\0\3\u0123\1\155\1\166\1\160\60\0\1\155\1\u0124"+
    "\2\0\2\157\1\155\1\160\5\0\1\161\1\157\2\0"+
    "\3\u0124\1\155\1\166\1\160\57\0\10\35\1\u0125\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\6\35\1\u0126\11\35\35\0"+
    "\4\35\1\u0127\4\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\10\35\1\u0128\3\0\12\35\1\0\1\35"+
    "\2\0\20\35\35\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\1\35\1\u0129\4\35\1\u012a\11\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\4\35\1\u012b\13\35"+
    "\35\0\11\35\3\0\12\35\1\0\1\35\2\0\12\35"+
    "\1\u012c\5\35\35\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\2\35\1\u012d\15\35\35\0\1\u012e\10\35\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\3\35\1\u012f"+
    "\5\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\1\u0130\17\35"+
    "\35\0\10\35\1\u0131\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\3\35\1\u0132\14\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\10\35\1\u0133\7\35\35\0\10\35\1\u0134"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\10\35"+
    "\1\u0135\3\0\12\35\1\0\1\35\2\0\20\35\120\0"+
    "\1\u0136\23\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\2\35\1\u0137\15\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\14\35\1\u0138\3\35\35\0\10\35\1\u0139"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\6\35\1\u013a\11\35"+
    "\35\0\11\35\3\0\12\35\1\0\1\35\2\0\2\35"+
    "\1\u013b\15\35\35\0\10\35\1\u013c\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\4\35\1\u013d\13\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\1\u013e\17\35\35\0\10\35"+
    "\1\u013f\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\6\35\1\u0140\2\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\1\u0141\10\35\3\0\12\35\1\0\1\35"+
    "\2\0\20\35\35\0\3\35\1\u0142\5\35\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\10\35\1\u0143\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\1\35\1\u0144\16\35\35\0"+
    "\6\35\1\u0145\2\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\4\35\1\u0146\13\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\35\1\u0147\16\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\2\35\1\u0148\15\35\35\0"+
    "\5\35\1\u0149\3\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\5\35\1\u014a\3\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\15\35\1\u014b\2\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\1\35\1\u014c\16\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\1\35\1\u014d"+
    "\16\35\35\0\7\35\1\u014e\1\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\u014f\17\35\36\0\2\254\1\0\1\254"+
    "\2\0\2\254\5\0\1\254\2\0\5\254\1\0\1\254"+
    "\2\0\1\254\2\0\1\254\36\0\11\302\1\0\75\302"+
    "\22\0\1\u0150\64\0\10\302\1\114\1\u0112\75\302\11\u0116"+
    "\1\0\75\u0116\2\0\1\u0115\104\0\11\u0116\1\u0151\75\u0116"+
    "\10\u0152\1\u0153\1\u0117\75\u0152\1\0\2\u0118\1\u0119\2\u0118"+
    "\7\0\1\u0154\72\0\2\u0118\1\0\1\u0119\115\0\5\141"+
    "\1\u0155\3\141\3\0\12\141\1\0\1\141\2\0\20\141"+
    "\22\0\10\320\1\u011e\1\u011c\75\320\11\u011d\1\u0156\75\u011d"+
    "\13\0\3\35\1\u0157\5\35\3\0\12\35\1\0\1\35"+
    "\2\0\20\35\35\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\1\35\1\u0158\16\35\35\0\3\35\1\u0159\5\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\36\0\2\u015a"+
    "\1\0\1\u015a\2\157\2\u015a\5\0\1\u015a\1\157\1\0"+
    "\5\u015a\1\0\1\u015a\2\0\1\u015a\2\0\1\u015a\52\0"+
    "\1\155\1\u015b\2\0\2\157\1\155\1\160\5\0\1\161"+
    "\1\157\2\0\3\u015b\1\155\1\166\1\160\60\0\1\155"+
    "\1\u015c\2\0\2\157\1\155\1\160\5\0\1\161\1\157"+
    "\2\0\3\u015c\1\155\1\166\1\160\57\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\6\35\1\u015d\11\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\6\35\1\u015e"+
    "\11\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\7\35\1\u015f\10\35\35\0\1\u0160\10\35\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\11\35\3\0\12\35"+
    "\1\0\1\35\2\0\1\35\1\u0161\16\35\35\0\3\35"+
    "\1\u0162\5\35\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\11\35\3\0\12\35\1\0\1\35\2\0\12\35"+
    "\1\u0163\5\35\35\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\12\35\1\u0164\5\35\35\0\6\35\1\u0165\2\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\1\35\1\u0166\16\35"+
    "\35\0\5\35\1\u0167\3\35\3\0\12\35\1\0\1\35"+
    "\2\0\20\35\35\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\4\35\1\u0168\13\35\35\0\5\35\1\u0169\3\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\13\35\1\u016a\4\35"+
    "\35\0\3\35\1\u016b\3\35\1\u016c\1\35\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\11\35\3\0\12\35"+
    "\1\0\1\35\2\0\1\u016d\17\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\5\35\1\u016e\12\35\35\0"+
    "\4\35\1\u016f\4\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\4\35\1\u0170\13\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\6\35\1\u0171\11\35\35\0\10\35\1\u0172"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\2\35\1\u0173\15\35"+
    "\35\0\1\u0174\10\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\4\35\1\u0175\4\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\35\1\u0176\16\35\35\0\4\35\1\u0177"+
    "\4\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\10\35\1\u0178\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\1\u0179\10\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\u017a\17\35\35\0\10\35\1\u017b\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\6\35\1\u017c\2\35\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\1\35\1\u017d\16\35\35\0"+
    "\1\u017e\73\0\10\u0116\1\u0153\1\u0151\75\u0116\11\u0152\1\u017f"+
    "\75\u0152\13\0\6\141\1\u0180\2\141\3\0\12\141\1\0"+
    "\1\141\2\0\20\141\22\0\10\u011d\1\u0181\1\u0156\75\u011d"+
    "\13\0\10\35\1\u0182\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\7\35\1\u0183\1\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\36\0\2\u0184\1\0\1\u0184\2\157"+
    "\2\u0184\5\0\1\u0184\1\157\1\0\5\u0184\1\0\1\u0184"+
    "\2\0\1\u0184\2\0\1\u0184\52\0\1\155\1\u0185\2\0"+
    "\2\157\1\155\1\160\5\0\1\161\1\157\2\0\3\u0185"+
    "\1\155\1\166\1\160\60\0\1\155\1\u0186\2\0\2\157"+
    "\1\155\1\160\5\0\1\161\1\157\2\0\3\u0186\1\155"+
    "\1\166\1\160\57\0\11\35\3\0\12\35\1\0\1\35"+
    "\2\0\14\35\1\u0187\3\35\35\0\3\35\1\u0188\5\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\3\35"+
    "\1\u0189\5\35\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\5\35\1\u018a\3\35\3\0\12\35\1\0\1\35"+
    "\2\0\20\35\35\0\10\35\1\u018b\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\10\35\1\u018c\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\3\35\1\u018d\5\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\11\35"+
    "\3\0\12\35\1\0\1\35\2\0\1\u018e\17\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\1\u018f\17\35"+
    "\35\0\10\35\1\u0190\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\35\1\u0191\16\35\35\0\5\35\1\u0192\3\35\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\3\35\1\u0193"+
    "\5\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\1\35\1\u0194"+
    "\16\35\35\0\7\35\1\u0195\1\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\1\35\1\u0196\7\35\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\4\35\1\u0197"+
    "\4\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\1\35\1\u0198"+
    "\16\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\7\35\1\u0199\10\35\35\0\4\35\1\u019a\4\35\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\1\35\1\u019b\16\35\35\0"+
    "\4\35\1\u019c\4\35\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\u019d\17\35\35\0\1\u019e\10\35\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\36\0\1\u019f\72\0\10\u0152\1\u01a0"+
    "\1\u017f\75\u0152\13\0\7\141\1\u01a1\1\141\3\0\12\141"+
    "\1\0\1\141\2\0\20\141\36\0\2\u01a2\1\0\1\u01a2"+
    "\2\157\2\u01a2\5\0\1\u01a2\1\157\1\0\5\u01a2\1\0"+
    "\1\u01a2\2\0\1\u01a2\2\0\1\u01a2\52\0\1\155\1\u01a3"+
    "\2\0\2\157\1\155\1\160\5\0\1\161\1\157\2\0"+
    "\3\u01a3\1\155\1\166\1\160\60\0\1\155\1\u01a4\2\0"+
    "\2\157\1\155\1\160\5\0\1\161\1\157\2\0\3\u01a4"+
    "\1\155\1\166\1\160\57\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\1\u01a5\17\35\35\0\6\35\1\u01a6\2\35"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\10\35"+
    "\1\u01a7\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\1\35\1\u01a8"+
    "\16\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\35\1\u01a9\16\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\10\35\1\u01aa\7\35\35\0\1\35\1\u01ab"+
    "\7\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\11\35\3\0\12\35\1\0\1\35\2\0\2\35\1\u01ac"+
    "\15\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\1\u01ad\17\35\35\0\10\35\1\u01ae\3\0\12\35\1\0"+
    "\1\35\2\0\20\35\35\0\10\35\1\u01af\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\11\35\3\0\12\35"+
    "\1\0\1\35\2\0\1\35\1\u01b0\16\35\35\0\5\35"+
    "\1\u01b1\3\35\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\5\35\1\u01b2\3\35\3\0\12\35\1\0\1\35"+
    "\2\0\20\35\35\0\10\141\1\u01b3\3\0\12\141\1\0"+
    "\1\141\2\0\20\141\36\0\2\u01b4\1\0\1\u01b4\2\157"+
    "\2\u01b4\5\0\1\u01b4\1\157\1\0\5\u01b4\1\0\1\u01b4"+
    "\2\0\1\u01b4\2\0\1\u01b4\52\0\1\155\1\u01b5\2\0"+
    "\2\157\1\155\1\160\5\0\1\161\1\157\2\0\3\u01b5"+
    "\1\155\1\166\1\160\60\0\1\155\1\u01b6\2\0\2\157"+
    "\1\155\1\160\5\0\1\161\1\157\2\0\3\u01b6\1\155"+
    "\1\166\1\160\57\0\4\35\1\u01b7\4\35\3\0\12\35"+
    "\1\0\1\35\2\0\20\35\35\0\10\35\1\u01b8\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\7\35\1\u01b9"+
    "\1\35\3\0\12\35\1\0\1\35\2\0\20\35\35\0"+
    "\10\35\1\u01ba\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\10\35\1\u01bb\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\35\0\11\35\3\0\12\35\1\0\1\35\2\0"+
    "\4\35\1\u01bc\13\35\35\0\11\35\3\0\12\35\1\0"+
    "\1\35\2\0\4\35\1\u01bd\13\35\35\0\11\35\3\0"+
    "\12\35\1\0\1\35\2\0\4\35\1\u01be\13\35\35\0"+
    "\10\35\1\u01bf\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\35\0\10\35\1\u01c0\3\0\12\35\1\0\1\35\2\0"+
    "\20\35\23\0\2\u01c1\1\u01c2\2\u01c1\5\0\11\141\3\0"+
    "\12\141\1\0\1\141\2\0\20\141\36\0\2\u01c3\1\0"+
    "\1\u01c3\2\157\2\u01c3\5\0\1\u01c3\1\157\1\0\5\u01c3"+
    "\1\0\1\u01c3\2\0\1\u01c3\2\0\1\u01c3\52\0\1\155"+
    "\1\u01c4\2\0\2\157\1\155\1\160\5\0\1\161\1\157"+
    "\2\0\3\u01c4\1\155\1\166\1\160\60\0\1\155\1\u01c5"+
    "\2\0\2\157\1\155\1\160\5\0\1\161\1\157\2\0"+
    "\3\u01c5\1\155\1\166\1\160\57\0\10\35\1\u01c6\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\35\0\10\35\1\u01c7"+
    "\3\0\12\35\1\0\1\35\2\0\20\35\35\0\7\35"+
    "\1\u01c8\1\35\3\0\12\35\1\0\1\35\2\0\20\35"+
    "\23\0\2\u01c1\1\u01c2\2\u01c1\16\0\1\u01c9\1\0\1\u01ca"+
    "\61\0\2\u01c1\1\0\1\u01c2\116\0\2\u01cb\1\0\1\u01cb"+
    "\2\157\2\u01cb\5\0\1\u01cb\1\157\1\0\5\u01cb\1\0"+
    "\1\u01cb\2\0\1\u01cb\2\0\1\u01cb\52\0\1\155\1\u01cc"+
    "\2\0\2\157\1\155\1\160\5\0\1\161\1\157\2\0"+
    "\3\u01cc\1\155\1\166\1\160\60\0\1\155\1\u01cd\2\0"+
    "\2\157\1\155\1\160\5\0\1\161\1\157\2\0\3\u01cd"+
    "\1\155\1\166\1\160\57\0\7\35\1\u01ce\1\35\3\0"+
    "\12\35\1\0\1\35\2\0\20\35\22\0\25\u01c9\1\u01cf"+
    "\61\u01c9\26\u01ca\1\u01cf\60\u01ca\14\0\2\u01d0\1\0\1\u01d0"+
    "\2\157\2\u01d0\5\0\1\u01d0\1\157\1\0\5\u01d0\1\0"+
    "\1\u01d0\2\0\1\u01d0\2\0\1\u01d0\52\0\1\155\1\u01d1"+
    "\2\0\2\157\1\155\1\160\5\0\1\161\1\157\2\0"+
    "\3\u01d1\1\155\1\166\1\160\60\0\1\155\1\u01d2\2\0"+
    "\2\157\1\155\1\160\5\0\1\161\1\157\2\0\3\u01d2"+
    "\1\155\1\166\1\160\60\0\2\u01d3\1\0\1\u01d3\2\157"+
    "\2\u01d3\5\0\1\u01d3\1\157\1\0\5\u01d3\1\0\1\u01d3"+
    "\2\0\1\u01d3\2\0\1\u01d3\52\0\1\155\1\u01d4\2\0"+
    "\2\157\1\155\1\160\5\0\1\161\1\157\2\0\3\u01d4"+
    "\1\155\1\166\1\160\60\0\1\155\1\u01d5\2\0\2\157"+
    "\1\155\1\160\5\0\1\161\1\157\2\0\3\u01d5\1\155"+
    "\1\166\1\160\60\0\2\u01d6\1\0\1\u01d6\2\157\2\u01d6"+
    "\5\0\1\u01d6\1\157\1\0\5\u01d6\1\0\1\u01d6\2\0"+
    "\1\u01d6\2\0\1\u01d6\52\0\1\155\1\u01d7\2\0\2\157"+
    "\1\155\1\160\5\0\1\161\1\157\2\0\3\u01d7\1\155"+
    "\1\166\1\160\60\0\1\155\1\u01d8\2\0\2\157\1\155"+
    "\1\160\5\0\1\161\1\157\2\0\3\u01d8\1\155\1\166"+
    "\1\160\60\0\2\u01d9\1\0\1\u01d9\2\157\2\u01d9\5\0"+
    "\1\u01d9\1\157\1\0\5\u01d9\1\0\1\u01d9\2\0\1\u01d9"+
    "\2\0\1\u01d9\52\0\1\155\1\u01da\2\0\2\157\1\155"+
    "\1\160\5\0\1\161\1\157\2\0\3\u01da\1\155\1\166"+
    "\1\160\60\0\1\155\1\u01db\2\0\2\157\1\155\1\160"+
    "\5\0\1\161\1\157\2\0\3\u01db\1\155\1\166\1\160"+
    "\60\0\2\u01dc\1\0\1\u01dc\2\157\2\u01dc\5\0\1\u01dc"+
    "\1\157\1\0\5\u01dc\1\0\1\u01dc\2\0\1\u01dc\2\0"+
    "\1\u01dc\52\0\1\155\1\u01dd\2\0\2\157\1\155\1\160"+
    "\5\0\1\161\1\157\2\0\3\u01dd\1\155\1\166\1\160"+
    "\60\0\1\155\1\u01de\2\0\2\157\1\155\1\160\5\0"+
    "\1\161\1\157\2\0\3\u01de\1\155\1\166\1\160\60\0"+
    "\2\u01df\1\0\1\u01df\2\157\2\u01df\5\0\1\u01df\1\157"+
    "\1\0\5\u01df\1\0\1\u01df\2\0\1\u01df\2\0\1\u01df"+
    "\52\0\1\155\1\u01e0\2\0\2\157\1\155\1\160\5\0"+
    "\1\161\1\157\2\0\3\u01e0\1\155\1\166\1\160\60\0"+
    "\1\155\1\u01e1\2\0\2\157\1\155\1\160\5\0\1\161"+
    "\1\157\2\0\3\u01e1\1\155\1\166\1\160\60\0\2\u01e2"+
    "\1\0\1\u01e2\2\157\2\u01e2\5\0\1\u01e2\1\157\1\0"+
    "\5\u01e2\1\0\1\u01e2\2\0\1\u01e2\2\0\1\u01e2\52\0"+
    "\1\155\1\u01e3\2\0\2\157\1\155\1\160\5\0\1\161"+
    "\1\157\2\0\3\u01e3\1\155\1\166\1\160\60\0\1\155"+
    "\1\u01e4\2\0\2\157\1\155\1\160\5\0\1\161\1\157"+
    "\2\0\3\u01e4\1\155\1\166\1\160\60\0\2\u01e5\1\0"+
    "\1\u01e5\2\157\2\u01e5\5\0\1\u01e5\1\157\1\0\5\u01e5"+
    "\1\0\1\u01e5\2\0\1\u01e5\2\0\1\u01e5\52\0\1\155"+
    "\1\u01e6\2\0\2\157\1\155\1\160\5\0\1\161\1\157"+
    "\2\0\3\u01e6\1\155\1\166\1\160\64\0\2\157\10\0"+
    "\1\157\70\0\1\155\1\u01e7\2\0\2\157\1\155\1\160"+
    "\5\0\1\161\1\157\2\0\3\u01e7\1\155\1\166\1\160"+
    "\60\0\1\155\1\u01e8\2\0\2\157\1\155\1\160\5\0"+
    "\1\161\1\157\2\0\3\u01e8\1\155\1\166\1\160\60\0"+
    "\1\155\1\u01e9\2\0\2\157\1\155\1\160\5\0\1\161"+
    "\1\157\2\0\3\u01e9\1\155\1\166\1\160\60\0\1\155"+
    "\1\u01ea\2\0\2\157\1\155\1\160\5\0\1\161\1\157"+
    "\2\0\3\u01ea\1\155\1\166\1\160\60\0\1\155\1\161"+
    "\2\0\2\157\1\155\1\160\5\0\1\161\1\157\2\0"+
    "\3\161\1\155\1\166\1\160\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25347];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\3\1\1\11\17\1\1\11\4\1\1\11"+
    "\12\1\10\11\2\1\2\11\5\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\2\1\3\11"+
    "\3\1\1\11\3\1\1\11\1\1\1\11\4\0\1\1"+
    "\2\0\1\11\1\0\3\1\1\0\3\11\6\1\1\11"+
    "\2\1\1\0\1\1\1\0\23\1\1\11\1\1\2\11"+
    "\1\0\2\11\23\1\13\11\1\1\3\11\1\1\2\11"+
    "\2\1\5\11\1\1\3\11\4\0\1\1\1\0\1\1"+
    "\3\0\1\1\1\0\1\1\2\0\3\1\1\11\2\0"+
    "\6\1\1\11\1\1\1\0\25\1\1\11\1\1\2\11"+
    "\32\1\1\11\1\1\4\0\1\1\1\11\4\0\2\1"+
    "\2\0\1\11\27\1\1\11\31\1\3\0\2\11\1\1"+
    "\1\0\47\1\2\0\1\1\1\11\35\1\2\11\40\1"+
    "\2\0\6\1\2\0\4\1\1\11\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[490];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuffer string = new StringBuffer();

  private String originId;
  
  /** 
   * Resets scanner.
   */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    yyreset(reader);
  } 
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  } 
  
  /** Returns whether the given comment would be swallowed by a macro. 
   *  This is true is all lines (but not the last one) are ended with a backslash (macro continuation). 
   */
  private boolean isMacroSwallowedComment (String comment) {
  	java.util.List<String> lines = org.conqat.lib.commons.string.StringUtils.splitLinesAsList(yytext());
  	for (int i = 0; i < lines.size()-1; ++i) {
  	  if (!lines.get(i).endsWith ("\\")) {
  	    return false;
  	  }
  	}
  	return true;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CPPScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CPPScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CPPToken internalScan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 133: 
          { if (isMacroSwallowedComment(yytext())) {
                                   // swallow single line comment, as more tokens might follow
                                   string.append(yytext());
                               } else {
                                   yybegin(YYINITIAL); 
                                   pushToken(new CPPToken(ETokenType.DOCUMENTATION_COMMENT, yychar, yyline, yytext(), originId));
                                   return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
                               }
          }
        case 149: break;
        case 68: 
          { return new CPPToken(ETokenType.OROR, yychar, yyline, yytext(), originId);
          }
        case 150: break;
        case 26: 
          { return new CPPToken(ETokenType.QUESTION, yychar, yyline, yytext(), originId);
          }
        case 151: break;
        case 21: 
          { return new CPPToken(ETokenType.SEMICOLON, yychar, yyline, yytext(), originId);
          }
        case 152: break;
        case 140: 
          { return new CPPToken(ETokenType.TEMPLATE, yychar, yyline, yytext(), originId);
          }
        case 153: break;
        case 112: 
          { return new CPPToken(ETokenType.CONST, yychar, yyline, yytext(), originId);
          }
        case 154: break;
        case 52: 
          { return new CPPToken(ETokenType.DO, yychar, yyline, yytext(), originId);
          }
        case 155: break;
        case 19: 
          { return new CPPToken(ETokenType.LBRACK, yychar, yyline, yytext(), originId);
          }
        case 156: break;
        case 45: 
          { yybegin(PREPROCESSOR_DIRECTIVE); string.setLength(0); string.append(yytext());
          }
        case 157: break;
        case 39: 
          { yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.BACKTICK_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
          }
        case 158: break;
        case 14: 
          { yybegin(CHARLITERAL); string.setLength(0);
          }
        case 159: break;
        case 22: 
          { return new CPPToken(ETokenType.COMMA, yychar, yyline, yytext(), originId);
          }
        case 160: break;
        case 118: 
          { return new CPPToken(ETokenType.WHILE, yychar, yyline, yytext(), originId);
          }
        case 161: break;
        case 128: 
          { return new CPPToken(ETokenType.STATIC, yychar, yyline, yytext(), originId);
          }
        case 162: break;
        case 42: 
          { yybegin(STRING_IN_PREPROCESSOR); string.append(yytext());
          }
        case 163: break;
        case 33: 
          { string.append( yytext() );
          }
        case 164: break;
        case 89: 
          { return new CPPToken(ETokenType.LSHIFTEQ, yychar, yyline, yytext(), originId);
          }
        case 165: break;
        case 49: 
          { return new CPPToken(ETokenType.NOTEQ, yychar, yyline, yytext(), originId);
          }
        case 166: break;
        case 11: 
          { yybegin(STRING); string.setLength(0); string.append(yytext());
          }
        case 167: break;
        case 136: 
          { return new CPPToken(ETokenType.PRIVATE, yychar, yyline, yytext(), originId);
          }
        case 168: break;
        case 91: 
          { return new CPPToken(ETokenType.RSHIFTEQ, yychar, yyline, yytext(), originId);
          }
        case 169: break;
        case 123: 
          { return new CPPToken(ETokenType.DOUBLE, yychar, yyline, yytext(), originId);
          }
        case 170: break;
        case 12: 
          { return new CPPToken(ETokenType.DOT, yychar, yyline, yytext(), originId);
          }
        case 171: break;
        case 138: 
          { return new CPPToken(ETokenType.CONTINUE, yychar, yyline, yytext(), originId);
          }
        case 172: break;
        case 127: 
          { return new CPPToken(ETokenType.SIZEOF, yychar, yyline, yytext(), originId);
          }
        case 173: break;
        case 34: 
          { yybegin(YYINITIAL); string.append(yytext());
  								   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 174: break;
        case 53: 
          { return new CPPToken(ETokenType.LSHIFT, yychar, yyline, yytext(), originId);
          }
        case 175: break;
        case 44: 
          { return new CPPToken(ETokenType.CONCATENATION, yychar, yyline, yytext(), originId);
          }
        case 176: break;
        case 108: 
          { if (isMacroSwallowedComment(yytext())) {
                                   // swallow single line comment, as more tokens might follow
                                   string.append(yytext());
                               } else {
                                   yybegin(YYINITIAL); 
                                   pushToken(new CPPToken(ETokenType.TRADITIONAL_COMMENT, yychar, yyline, yytext(), originId));
                                   return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
                               }
          }
        case 177: break;
        case 70: 
          { return new CPPToken(ETokenType.MODEQ, yychar, yyline, yytext(), originId);
          }
        case 178: break;
        case 100: 
          { return new CPPToken(ETokenType.ENUM, yychar, yyline, yytext(), originId);
          }
        case 179: break;
        case 61: 
          { return new CPPToken(ETokenType.MINUSMINUS, yychar, yyline, yytext(), originId);
          }
        case 180: break;
        case 148: 
          { return new CPPToken(ETokenType.PREPROCESSOR_INCLUDE, yychar, yyline, yytext(), originId);
          }
        case 181: break;
        case 4: 
          { return new CPPToken(ETokenType.DIV, yychar, yyline, yytext(), originId);
          }
        case 182: break;
        case 129: 
          { return new CPPToken(ETokenType.STRUCT, yychar, yyline, yytext(), originId);
          }
        case 183: break;
        case 66: 
          { return new CPPToken(ETokenType.ANDAND, yychar, yyline, yytext(), originId);
          }
        case 184: break;
        case 98: 
          { return new CPPToken(ETokenType.CHAR, yychar, yyline, yytext(), originId);
          }
        case 185: break;
        case 146: 
          { return new CPPToken(ETokenType.PROTECTED, yychar, yyline, yytext(), originId);
          }
        case 186: break;
        case 27: 
          { return new CPPToken(ETokenType.COLON, yychar, yyline, yytext(), originId);
          }
        case 187: break;
        case 120: 
          { return new CPPToken(ETokenType.INLINE, yychar, yyline, yytext(), originId);
          }
        case 188: break;
        case 72: 
          { string.append( "\\\\" );
          }
        case 189: break;
        case 78: 
          { string.append( "\\a" );
          }
        case 190: break;
        case 23: 
          { return new CPPToken(ETokenType.MINUS, yychar, yyline, yytext(), originId);
          }
        case 191: break;
        case 18: 
          { return new CPPToken(ETokenType.RBRACE, yychar, yyline, yytext(), originId);
          }
        case 192: break;
        case 9: 
          { return new CPPToken(ETokenType.LT, yychar, yyline, yytext(), originId);
          }
        case 193: break;
        case 57: 
          { return new CPPToken(ETokenType.DOTSTAR, yychar, yyline, yytext(), originId);
          }
        case 194: break;
        case 13: 
          { return new CPPToken(ETokenType.PLUS, yychar, yyline, yytext(), originId);
          }
        case 195: break;
        case 43: 
          { yybegin(PREPROCESSOR_DIRECTIVE); string.append(yytext());
          }
        case 196: break;
        case 96: 
          { return new CPPToken(ETokenType.TRADITIONAL_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 197: break;
        case 15: 
          { return new CPPToken(ETokenType.LPAREN, yychar, yyline, yytext(), originId);
          }
        case 198: break;
        case 83: 
          { string.append( "\\v" );
          }
        case 199: break;
        case 144: 
          { return new CPPToken(ETokenType.VOLATILE, yychar, yyline, yytext(), originId);
          }
        case 200: break;
        case 58: 
          { return new CPPToken(ETokenType.PLUSPLUS, yychar, yyline, yytext(), originId);
          }
        case 201: break;
        case 24: 
          { return new CPPToken(ETokenType.EQ, yychar, yyline, yytext(), originId);
          }
        case 202: break;
        case 10: 
          { return new CPPToken(ETokenType.GT, yychar, yyline, yytext(), originId);
          }
        case 203: break;
        case 7: 
          { return new CPPToken(ETokenType.IDENTIFIER, yychar, yyline, yytext(), originId);
          }
        case 204: break;
        case 2: 
          { /* ignore */
          }
        case 205: break;
        case 36: 
          { yybegin(YYINITIAL); 
  								   return new CPPToken(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()-1, yyline, "'"+string.toString()+"'", originId);
          }
        case 206: break;
        case 106: 
          { return new CPPToken(ETokenType.GOTO, yychar, yyline, yytext(), originId);
          }
        case 207: break;
        case 32: 
          { yybegin(BACKTICK_STRING); string.setLength(0);
          }
        case 208: break;
        case 35: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return new CPPToken(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 209: break;
        case 74: 
          { string.append("\\0" );
          }
        case 210: break;
        case 135: 
          { return new CPPToken(ETokenType.TYPEDEF, yychar, yyline, yytext(), originId);
          }
        case 211: break;
        case 69: 
          { return new CPPToken(ETokenType.XOREQ, yychar, yyline, yytext(), originId);
          }
        case 212: break;
        case 81: 
          { string.append( "\\r" );
          }
        case 213: break;
        case 90: 
          { return new CPPToken(ETokenType.URSHIFT, yychar, yyline, yytext(), originId);
          }
        case 214: break;
        case 64: 
          { return new CPPToken(ETokenType.SCOPE, yychar, yyline, yytext(), originId);
          }
        case 215: break;
        case 105: 
          { return new CPPToken(ETokenType.THIS, yychar, yyline, yytext(), originId);
          }
        case 216: break;
        case 97: 
          { return new CPPToken(ETokenType.CASE, yychar, yyline, yytext(), originId);
          }
        case 217: break;
        case 131: 
          { return new CPPToken(ETokenType.PUBLIC, yychar, yyline, yytext(), originId);
          }
        case 218: break;
        case 102: 
          { return new CPPToken(ETokenType.URSHIFTEQ, yychar, yyline, yytext(), originId);
          }
        case 219: break;
        case 111: 
          { return new CPPToken(ETokenType.CATCH, yychar, yyline, yytext(), originId);
          }
        case 220: break;
        case 3: 
          { yyline -= 1;
          }
        case 221: break;
        case 142: 
          { return new CPPToken(ETokenType.OPERATOR, yychar, yyline, yytext(), originId);
          }
        case 222: break;
        case 145: 
          { return new CPPToken(ETokenType.NAMESPACE, yychar, yyline, yytext(), originId);
          }
        case 223: break;
        case 71: 
          { return new CPPToken(ETokenType.ILLEGAL_ESCAPE_SEQUENCE, yychar, yyline, yytext(), originId);
          }
        case 224: break;
        case 126: 
          { return new CPPToken(ETokenType.SIGNED, yychar, yyline, yytext(), originId);
          }
        case 225: break;
        case 137: 
          { return new CPPToken(ETokenType.VIRTUAL, yychar, yyline, yytext(), originId);
          }
        case 226: break;
        case 75: 
          { string.append( "\\n" );
          }
        case 227: break;
        case 109: 
          { return new CPPToken(ETokenType.FLOAT, yychar, yyline, yytext(), originId);
          }
        case 228: break;
        case 37: 
          { yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.CHARACTER_LITERAL, yychar-string.length()-1, yyline, "'"+string.toString()+"'", originId);
          }
        case 229: break;
        case 134: 
          { return new CPPToken(ETokenType.DEFAULT, yychar, yyline, yytext(), originId);
          }
        case 230: break;
        case 76: 
          { string.append( "\\\"" );
          }
        case 231: break;
        case 125: 
          { return new CPPToken(ETokenType.RETURN, yychar, yyline, yytext(), originId);
          }
        case 232: break;
        case 40: 
          { string.append(yytext());
          }
        case 233: break;
        case 110: 
          { return new CPPToken(ETokenType.CLASS, yychar, yyline, yytext(), originId);
          }
        case 234: break;
        case 92: 
          { return new CPPToken(ETokenType.ELLIPSIS, yychar, yyline, yytext(), originId);
          }
        case 235: break;
        case 20: 
          { return new CPPToken(ETokenType.RBRACK, yychar, yyline, yytext(), originId);
          }
        case 236: break;
        case 51: 
          { return new CPPToken(ETokenType.FLOATING_POINT_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 237: break;
        case 116: 
          { return new CPPToken(ETokenType.BREAK, yychar, yyline, yytext(), originId);
          }
        case 238: break;
        case 101: 
          { return new CPPToken(ETokenType.ELSE, yychar, yyline, yytext(), originId);
          }
        case 239: break;
        case 93: 
          { return new CPPToken(ETokenType.TRY, yychar, yyline, yytext(), originId);
          }
        case 240: break;
        case 119: 
          { return new CPPToken(ETokenType.DOCUMENTATION_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 241: break;
        case 29: 
          { return new CPPToken(ETokenType.OR, yychar, yyline, yytext(), originId);
          }
        case 242: break;
        case 130: 
          { return new CPPToken(ETokenType.SWITCH, yychar, yyline, yytext(), originId);
          }
        case 243: break;
        case 132: 
          { yybegin(YYINITIAL); return new CPPToken(ETokenType.IF_ZERO_BLOCK, yychar-string.length(), yyline, string.toString()+yytext(), originId);
          }
        case 244: break;
        case 54: 
          { return new CPPToken(ETokenType.LTEQ, yychar, yyline, yytext(), originId);
          }
        case 245: break;
        case 17: 
          { return new CPPToken(ETokenType.LBRACE, yychar, yyline, yytext(), originId);
          }
        case 246: break;
        case 55: 
          { return new CPPToken(ETokenType.RSHIFT, yychar, yyline, yytext(), originId);
          }
        case 247: break;
        case 62: 
          { return new CPPToken(ETokenType.MINUSEQ, yychar, yyline, yytext(), originId);
          }
        case 248: break;
        case 114: 
          { return new CPPToken(ETokenType.USING, yychar, yyline, yytext(), originId);
          }
        case 249: break;
        case 41: 
          { yybegin(YYINITIAL); return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
          }
        case 250: break;
        case 65: 
          { return new CPPToken(ETokenType.ANDEQ, yychar, yyline, yytext(), originId);
          }
        case 251: break;
        case 77: 
          { string.append( "\\'");
          }
        case 252: break;
        case 38: 
          { yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
          }
        case 253: break;
        case 63: 
          { return new CPPToken(ETokenType.EQEQ, yychar, yyline, yytext(), originId);
          }
        case 254: break;
        case 8: 
          { return new CPPToken(ETokenType.INTEGER_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 255: break;
        case 99: 
          { return new CPPToken(ETokenType.LONG, yychar, yyline, yytext(), originId);
          }
        case 256: break;
        case 107: 
          { return new CPPToken(ETokenType.VOID, yychar, yyline, yytext(), originId);
          }
        case 257: break;
        case 104: 
          { return new CPPToken(ETokenType.BOOLEAN_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 258: break;
        case 67: 
          { return new CPPToken(ETokenType.OREQ, yychar, yyline, yytext(), originId);
          }
        case 259: break;
        case 94: 
          { return new CPPToken(ETokenType.ARROWSTAR, yychar, yyline, yytext(), originId);
          }
        case 260: break;
        case 143: 
          { return new CPPToken(ETokenType.REGISTER, yychar, yyline, yytext(), originId);
          }
        case 261: break;
        case 87: 
          { return new CPPToken(ETokenType.FOR, yychar, yyline, yytext(), originId);
          }
        case 262: break;
        case 31: 
          { return new CPPToken(ETokenType.MOD, yychar, yyline, yytext(), originId);
          }
        case 263: break;
        case 30: 
          { return new CPPToken(ETokenType.XOR, yychar, yyline, yytext(), originId);
          }
        case 264: break;
        case 84: 
          { string.append( "\\?" );
          }
        case 265: break;
        case 73: 
          { string.append( "\\f" );
          }
        case 266: break;
        case 141: 
          { return new CPPToken(ETokenType.TYPENAME, yychar, yyline, yytext(), originId);
          }
        case 267: break;
        case 16: 
          { return new CPPToken(ETokenType.RPAREN, yychar, yyline, yytext(), originId);
          }
        case 268: break;
        case 46: 
          { return new CPPToken(ETokenType.END_OF_LINE_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 269: break;
        case 60: 
          { return new CPPToken(ETokenType.POINTERTO, yychar, yyline, yytext(), originId);
          }
        case 270: break;
        case 124: 
          { return new CPPToken(ETokenType.EXTERN, yychar, yyline, yytext(), originId);
          }
        case 271: break;
        case 122: 
          { return new CPPToken(ETokenType.DELETE, yychar, yyline, yytext(), originId);
          }
        case 272: break;
        case 56: 
          { return new CPPToken(ETokenType.GTEQ, yychar, yyline, yytext(), originId);
          }
        case 273: break;
        case 79: 
          { string.append( "\\t" );
          }
        case 274: break;
        case 5: 
          { return new CPPToken(ETokenType.MULT, yychar, yyline, yytext(), originId);
          }
        case 275: break;
        case 121: 
          { return new CPPToken(ETokenType.FRIEND, yychar, yyline, yytext(), originId);
          }
        case 276: break;
        case 88: 
          { return new CPPToken(ETokenType.NEW, yychar, yyline, yytext(), originId);
          }
        case 277: break;
        case 139: 
          { return new CPPToken(ETokenType.UNSIGNED, yychar, yyline, yytext(), originId);
          }
        case 278: break;
        case 95: 
          { yybegin(PREPROCESSOR_IGNORE_IF_NULL); string.setLength(0); string.append(yytext());
          }
        case 279: break;
        case 85: 
          { yybegin(YYINITIAL); 
                               pushToken(new CPPToken(ETokenType.END_OF_LINE_COMMENT, yychar, yyline, yytext(), originId));
                               return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
          }
        case 280: break;
        case 117: 
          { return new CPPToken(ETokenType.SHORT, yychar, yyline, yytext(), originId);
          }
        case 281: break;
        case 113: 
          { return new CPPToken(ETokenType.UNION, yychar, yyline, yytext(), originId);
          }
        case 282: break;
        case 28: 
          { return new CPPToken(ETokenType.AND, yychar, yyline, yytext(), originId);
          }
        case 283: break;
        case 48: 
          { return new CPPToken(ETokenType.MULTEQ, yychar, yyline, yytext(), originId);
          }
        case 284: break;
        case 147: 
          { return new CPPToken(ETokenType.REDECLARED, yychar, yyline, yytext(), originId);
          }
        case 285: break;
        case 80: 
          { string.append( "\\b" );
          }
        case 286: break;
        case 86: 
          { return new CPPToken(ETokenType.INT, yychar, yyline, yytext(), originId);
          }
        case 287: break;
        case 25: 
          { return new CPPToken(ETokenType.COMP, yychar, yyline, yytext(), originId);
          }
        case 288: break;
        case 50: 
          { return new CPPToken(ETokenType.IF, yychar, yyline, yytext(), originId);
          }
        case 289: break;
        case 6: 
          { return new CPPToken(ETokenType.NOT, yychar, yyline, yytext(), originId);
          }
        case 290: break;
        case 103: 
          { return new CPPToken(ETokenType.AUTO, yychar, yyline, yytext(), originId);
          }
        case 291: break;
        case 115: 
          { return new CPPToken(ETokenType.THROW, yychar, yyline, yytext(), originId);
          }
        case 292: break;
        case 47: 
          { return new CPPToken(ETokenType.DIVEQ, yychar, yyline, yytext(), originId);
          }
        case 293: break;
        case 82: 
          { string.append( "\\p" );
          }
        case 294: break;
        case 59: 
          { return new CPPToken(ETokenType.PLUSEQ, yychar, yyline, yytext(), originId);
          }
        case 295: break;
        case 1: 
          { return new CPPToken(ETokenType.ILLEGAL_CHARACTER, yychar, yyline, yytext(), originId);
          }
        case 296: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); string.append(yytext());
  								   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 491: break;
            case BACKTICK_STRING: {
              yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
            }
            case 492: break;
            case PREPROCESSOR_DIRECTIVE: {
              yybegin(YYINITIAL); return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
            }
            case 493: break;
            case STRING_IN_PREPROCESSOR: {
              yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
            }
            case 494: break;
            case CHARLITERAL: {
              yybegin(YYINITIAL); 
  								   return new CPPToken(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()-1, yyline, "'"+string.toString()+"'", originId);
            }
            case 495: break;
            default:
              {
                return new CPPToken(ETokenType.EOF, yychar, yyline, yytext(), originId);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
