/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

package org.conqat.lib.scanner;
import java.util.HashSet;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/local/conqat-root/lib/org.conqat.lib.scanner/grammars/php.flex</tt>
 */
class PHPScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOUBLEQUOTEDSTRING = 6;
  public static final int INSTANCECALL = 14;
  public static final int DOCCOMMENT = 10;
  public static final int YYINITIAL = 0;
  public static final int BACKTICKSTRING = 8;
  public static final int HEREDOC = 12;
  public static final int PHP = 2;
  public static final int SINGLEQUOTEDSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\4\1\1\16\11\4\0\1\3\1\71"+
    "\1\77\1\7\1\23\1\67\1\72\1\100\1\55\1\56\1\6\1\22"+
    "\1\64\1\65\1\20\1\5\1\12\3\16\4\17\2\13\1\66\1\63"+
    "\1\25\1\70\1\31\1\26\1\76\1\32\1\33\1\37\1\41\1\21"+
    "\1\15\1\51\1\30\1\46\1\53\1\45\1\44\1\52\1\40\1\43"+
    "\1\27\1\24\1\36\1\34\1\35\1\47\1\54\1\50\1\14\1\42"+
    "\1\24\1\61\1\102\1\62\1\74\1\24\1\101\1\32\1\33\1\37"+
    "\1\41\1\21\1\15\1\51\1\30\1\46\1\53\1\45\1\44\1\52"+
    "\1\40\1\43\1\27\1\24\1\36\1\34\1\35\1\47\1\54\1\50"+
    "\1\14\1\42\1\24\1\57\1\73\1\60\1\75\41\11\2\0\4\10"+
    "\4\0\1\10\2\0\1\11\7\0\1\10\4\0\1\10\5\0\27\10"+
    "\1\0\37\10\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10"+
    "\1\0\1\10\21\0\160\11\5\10\1\0\2\10\2\0\4\10\10\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0"+
    "\213\10\1\0\5\11\2\0\236\10\11\0\46\10\2\0\1\10\7\0"+
    "\47\10\11\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\1\11\10\0\33\10\5\0\3\10\15\0\4\11\7\0\1\10\4\0"+
    "\13\11\5\0\53\10\37\11\4\0\2\10\1\11\143\10\1\0\1\10"+
    "\10\11\1\0\6\11\2\10\2\11\1\0\4\11\2\10\12\11\3\10"+
    "\2\0\1\10\17\0\1\11\1\10\1\11\36\10\33\11\2\0\131\10"+
    "\13\11\1\10\16\0\12\11\41\10\11\11\2\10\4\0\1\10\5\0"+
    "\26\10\4\11\1\10\11\11\1\10\3\11\1\10\5\11\22\0\31\10"+
    "\3\11\244\0\4\11\66\10\3\11\1\10\22\11\1\10\7\11\12\10"+
    "\2\11\2\0\12\11\1\0\7\10\1\0\7\10\1\0\3\11\1\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0"+
    "\4\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11\1\10"+
    "\10\0\1\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11\4\10"+
    "\7\0\1\10\5\0\3\11\1\0\6\10\4\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\2\0\1\11"+
    "\1\0\5\11\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\10"+
    "\1\0\1\10\7\0\14\11\3\10\1\11\13\0\3\11\1\0\11\10"+
    "\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\2\0\1\11\1\10\10\11\1\0\3\11\1\0\3\11\2\0\1\10"+
    "\17\0\2\10\2\11\2\0\12\11\1\0\1\10\17\0\3\11\1\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11\10\0"+
    "\2\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11\1\0\1\10"+
    "\20\0\1\11\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0"+
    "\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0"+
    "\14\10\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\10\6\0"+
    "\1\11\16\0\12\11\11\0\1\10\7\0\3\11\1\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10\7\11"+
    "\1\0\3\11\1\0\4\11\7\0\2\11\1\0\2\10\6\0\2\10"+
    "\2\11\2\0\12\11\22\0\2\11\1\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\2\0\1\11\1\10\7\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\7\0\1\10\1\0\2\10\2\11"+
    "\2\0\12\11\1\0\2\10\17\0\2\11\1\0\10\10\1\0\3\10"+
    "\1\0\51\10\2\0\1\10\7\11\1\0\3\11\1\0\4\11\1\10"+
    "\10\0\1\11\10\0\2\10\2\11\2\0\12\11\12\0\6\10\2\0"+
    "\2\11\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0"+
    "\7\10\3\0\1\11\4\0\6\11\1\0\1\11\1\0\10\11\22\0"+
    "\2\11\15\0\60\10\1\11\2\10\7\11\4\0\10\10\10\11\1\0"+
    "\12\11\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0"+
    "\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0"+
    "\1\10\2\0\2\10\1\0\4\10\1\11\2\10\6\11\1\0\2\11"+
    "\1\10\2\0\5\10\1\0\1\10\1\0\6\11\2\0\12\11\2\0"+
    "\2\10\42\0\1\10\27\0\2\11\6\0\12\11\13\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\2\11\10\10\1\0\44\10\4\0\24\11"+
    "\1\0\2\11\5\10\13\11\1\0\44\11\11\0\1\11\71\0\53\10"+
    "\24\11\1\10\12\11\6\0\6\10\4\11\4\10\3\11\1\10\3\11"+
    "\2\10\7\11\3\10\4\11\15\10\14\11\1\10\17\11\2\0\46\10"+
    "\12\0\53\10\1\0\1\10\3\0\u0149\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10"+
    "\1\0\71\10\1\0\4\10\2\0\103\10\2\0\3\11\40\0\20\10"+
    "\20\0\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10"+
    "\3\0\3\10\17\0\15\10\1\0\4\10\3\11\13\0\22\10\3\11"+
    "\13\0\22\10\2\11\14\0\15\10\1\0\3\10\1\0\2\11\14\0"+
    "\64\10\40\11\3\0\1\10\3\0\2\10\1\11\2\0\12\11\41\0"+
    "\3\11\2\0\12\11\6\0\130\10\10\0\51\10\1\11\1\10\5\0"+
    "\106\10\12\0\35\10\3\0\14\11\4\0\14\11\12\0\12\11\36\10"+
    "\2\0\5\10\13\0\54\10\4\0\21\11\7\10\2\11\6\0\12\11"+
    "\46\0\27\10\5\11\4\0\65\10\12\11\1\0\35\11\2\0\13\11"+
    "\6\0\12\11\15\0\1\10\130\0\5\11\57\10\21\11\7\10\4\0"+
    "\12\11\21\0\11\11\14\0\3\11\36\10\12\11\3\0\2\10\12\11"+
    "\6\0\46\10\16\11\14\0\44\10\24\11\10\0\12\11\3\0\3\10"+
    "\12\11\44\10\122\0\3\11\1\0\25\11\4\10\1\11\4\10\1\11"+
    "\15\0\300\10\47\11\25\0\4\11\u0116\10\2\0\6\10\2\0\46\10"+
    "\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10"+
    "\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10"+
    "\1\0\7\10\16\0\5\11\32\0\5\11\20\0\2\10\23\0\1\10"+
    "\13\0\5\11\5\0\6\11\1\0\1\10\15\0\1\10\20\0\15\10"+
    "\3\0\32\10\26\0\15\11\4\0\1\11\3\0\14\11\21\0\1\10"+
    "\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10"+
    "\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0\57\10\1\0\57\10"+
    "\1\0\205\10\6\0\4\10\3\11\16\0\46\10\12\0\66\10\11\0"+
    "\1\10\17\0\1\11\27\10\11\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\40\11\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11\1\0"+
    "\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10\1\0"+
    "\132\10\1\0\4\10\5\0\51\10\3\0\136\10\21\0\33\10\65\0"+
    "\20\10\u0200\0\u19b6\10\112\0\u51cc\10\64\0\u048d\10\103\0\56\10\2\0"+
    "\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\1\11\14\0\2\11"+
    "\1\0\31\10\10\0\120\10\2\11\45\0\11\10\2\0\147\10\2\0"+
    "\4\10\1\0\2\10\16\0\12\10\120\0\10\10\1\11\3\10\1\11"+
    "\4\10\1\11\27\10\5\11\20\0\1\10\7\0\64\10\14\0\2\11"+
    "\62\10\21\11\13\0\12\11\6\0\22\11\6\10\3\0\1\10\4\0"+
    "\12\11\34\10\10\11\2\0\27\10\15\11\14\0\35\10\3\0\4\11"+
    "\57\10\16\11\16\0\1\10\12\11\46\0\51\10\16\11\11\0\3\10"+
    "\1\11\10\10\2\11\2\0\12\11\6\0\27\10\3\0\1\10\1\11"+
    "\4\0\60\10\1\11\1\10\3\11\2\10\2\11\5\10\2\11\1\10"+
    "\1\11\1\10\30\0\3\10\43\0\6\10\2\0\6\10\2\0\6\10"+
    "\11\0\7\10\1\0\7\10\221\0\43\10\10\11\1\0\2\11\2\0"+
    "\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u012e\10\2\0"+
    "\76\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\11"+
    "\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0"+
    "\15\10\3\0\20\11\20\0\7\11\14\0\2\10\30\0\3\10\31\0"+
    "\1\10\6\0\5\10\1\0\207\10\2\0\1\11\4\0\1\10\13\0"+
    "\12\11\7\0\32\10\4\0\1\10\1\0\32\10\13\0\131\10\3\0"+
    "\6\10\2\0\6\10\2\0\6\10\2\0\3\10\3\0\2\10\3\0"+
    "\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\2\10\1\12\1\10\1\13\1\10\1\14"+
    "\1\15\1\10\1\16\17\10\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\2\3\44\2\46\1\47\1\2"+
    "\4\44\1\50\1\51\1\52\1\53\1\0\1\54\1\55"+
    "\2\7\1\11\1\56\1\0\2\11\1\56\1\0\11\10"+
    "\1\57\1\60\1\61\1\10\1\61\1\62\1\63\1\64"+
    "\1\65\2\10\1\66\1\67\1\10\1\70\21\10\1\71"+
    "\1\10\1\35\1\10\1\72\7\10\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\63\1\102\1\103\1\44"+
    "\1\104\2\0\1\105\1\0\2\53\2\0\3\11\1\56"+
    "\1\0\1\36\1\10\1\106\6\10\1\61\1\0\5\10"+
    "\1\102\7\10\1\107\10\10\1\110\10\10\1\111\1\10"+
    "\1\112\3\10\1\113\1\101\3\0\1\114\2\11\12\10"+
    "\1\115\1\61\1\0\6\10\1\116\1\117\4\10\1\120"+
    "\1\121\1\10\1\122\6\10\1\123\4\10\1\124\4\10"+
    "\1\125\1\10\1\52\1\0\2\11\1\10\1\126\1\127"+
    "\5\10\1\130\2\10\1\131\2\132\4\10\1\133\1\134"+
    "\4\10\1\135\1\10\1\136\1\137\1\10\1\140\1\141"+
    "\11\10\1\142\1\10\1\143\2\11\3\10\1\144\3\10"+
    "\1\145\2\10\1\146\2\10\1\147\1\150\1\151\1\152"+
    "\4\10\1\153\1\154\4\10\1\155\2\11\1\156\1\10"+
    "\1\157\5\10\1\160\1\10\1\161\2\10\1\162\1\163"+
    "\2\10\1\164\1\10\2\11\1\165\3\10\1\166\1\10"+
    "\1\167\1\170\4\10\2\11\1\10\1\171\1\10\1\172"+
    "\1\173\1\10\1\174\1\10\2\11\1\175\1\176\1\177"+
    "\1\200\6\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u029e\0\u029e\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u029e\0\u029e\0\u029e"+
    "\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u029e\0\u029e\0\u029e\0\u029e"+
    "\0\u029e\0\u029e\0\u0d16\0\u029e\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22"+
    "\0\u0e65\0\u029e\0\u029e\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u029e"+
    "\0\u029e\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u029e\0\u029e\0\u10c0"+
    "\0\u029e\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u029e\0\u029e\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u029e"+
    "\0\u029e\0\u029e\0\u163f\0\u1682\0\u029e\0\u029e\0\u16c5\0\u03ed"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\u1bbe\0\u03ed\0\u1c01\0\u03ed\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u029e\0\u029e\0\u029e"+
    "\0\u029e\0\u029e\0\u029e\0\u1e19\0\u1e5c\0\u029e\0\u029e\0\u1e9f"+
    "\0\u1ee2\0\u0ddf\0\u0f71\0\u0f71\0\u1f25\0\u1f68\0\u029e\0\u1fab"+
    "\0\u1fee\0\u1189\0\u2031\0\u2074\0\u20b7\0\u20b7\0\u03ed\0\u20fa"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u03ed\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u03ed\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u03ed"+
    "\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u03ed\0\u2b72\0\u2bb5\0\u2bf8\0\u03ed\0\u029e"+
    "\0\u2c3b\0\u2c7e\0\u2cc1\0\u029e\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5"+
    "\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd"+
    "\0\u3240\0\u3283\0\u03ed\0\u32c6\0\u3309\0\u334c\0\u338f\0\u03ed"+
    "\0\u03ed\0\u33d2\0\u03ed\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521"+
    "\0\u3564\0\u03ed\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u03ed\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u03ed\0\u37bf\0\u029e\0\u3802\0\u3845"+
    "\0\u3888\0\u38cb\0\u03ed\0\u03ed\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u3a1a\0\u03ed\0\u3a5d\0\u3aa0\0\u1533\0\u3ae3\0\u029e\0\u3b26"+
    "\0\u3b69\0\u3bac\0\u3bef\0\u03ed\0\u03ed\0\u3c32\0\u3c75\0\u3cb8"+
    "\0\u3cfb\0\u03ed\0\u3d3e\0\u03ed\0\u03ed\0\u3d81\0\u03ed\0\u03ed"+
    "\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99"+
    "\0\u3fdc\0\u03ed\0\u401f\0\u029e\0\u4062\0\u40a5\0\u40e8\0\u412b"+
    "\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u03ed\0\u42bd\0\u4300"+
    "\0\u03ed\0\u4343\0\u4386\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u43c9"+
    "\0\u440c\0\u444f\0\u4492\0\u03ed\0\u03ed\0\u44d5\0\u4518\0\u455b"+
    "\0\u459e\0\u03ed\0\u45e1\0\u4624\0\u03ed\0\u4667\0\u03ed\0\u46aa"+
    "\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u03ed\0\u47f9\0\u03ed\0\u483c"+
    "\0\u487f\0\u03ed\0\u03ed\0\u48c2\0\u4905\0\u03ed\0\u4948\0\u498b"+
    "\0\u49ce\0\u03ed\0\u4a11\0\u4a54\0\u4a97\0\u03ed\0\u4ada\0\u03ed"+
    "\0\u03ed\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u03ed\0\u4cf2\0\u03ed\0\u03ed\0\u4d35\0\u03ed\0\u4d78\0\u029e"+
    "\0\u4dbb\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u4dfe\0\u4e41\0\u4e84"+
    "\0\u4ec7\0\u4f0a\0\u1146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\25\11\1\12\55\11\1\13\1\14\2\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\13\1\23\1\24\1\25\1\26"+
    "\2\24\1\27\1\30\1\31\1\32\1\22\1\33\1\34"+
    "\1\35\1\22\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\22\1\47\1\50\1\22\1\51"+
    "\1\52\1\53\1\54\2\22\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\13\100\103\1\104\1\103\1\105\23\106"+
    "\1\107\53\106\1\104\2\106\1\105\1\110\1\111\1\112"+
    "\20\110\1\107\55\110\1\113\1\114\103\13\1\115\1\116"+
    "\1\117\60\115\1\120\17\115\14\121\2\122\3\121\1\122"+
    "\2\121\1\122\2\121\2\122\1\121\23\122\26\121\25\11"+
    "\1\0\55\11\26\0\1\123\161\0\1\15\105\0\1\124"+
    "\1\125\61\0\1\126\102\0\1\127\12\0\1\21\1\130"+
    "\1\131\100\21\10\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\23\22\40\0\1\132\1\133\1\134"+
    "\1\0\1\135\1\136\1\137\1\140\73\0\2\24\2\0"+
    "\2\24\1\137\1\140\71\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\11\22\1\141\11\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\1\142\10\22\1\143\1\144\1\22\1\145\1\146\5\22"+
    "\40\0\2\137\2\0\2\137\73\0\4\22\1\147\3\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\6\22"+
    "\1\150\3\22\1\151\10\22\50\0\1\152\45\0\1\153"+
    "\22\0\2\22\6\154\1\0\1\154\1\0\1\155\1\154"+
    "\2\0\2\154\1\0\3\154\1\156\17\154\53\0\1\157"+
    "\3\0\1\160\36\0\1\161\43\0\1\162\61\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\4\22"+
    "\1\163\10\22\1\164\5\22\57\0\1\165\36\0\1\166"+
    "\22\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\1\22\1\167\1\170\1\22\1\171\1\22\1\172"+
    "\14\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\4\22\1\173\4\22\1\174\11\22\36\0"+
    "\10\22\1\0\1\175\1\0\2\22\2\0\2\22\1\0"+
    "\3\22\1\176\12\22\1\177\4\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\1\22\1\200\1\0\4\22"+
    "\1\201\16\22\36\0\10\22\1\0\1\202\1\0\2\22"+
    "\2\0\2\22\1\0\23\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\1\203\10\22\1\204"+
    "\1\205\10\22\36\0\10\22\1\0\1\206\1\0\2\22"+
    "\2\0\2\22\1\0\1\207\14\22\1\210\5\22\36\0"+
    "\10\22\1\0\1\211\1\0\2\22\2\0\2\22\1\0"+
    "\11\22\1\212\11\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\1\22\1\213\2\22\1\214"+
    "\16\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\14\22\1\215\6\22\36\0\5\22\1\216"+
    "\2\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\6\22\1\217\11\22\1\220\2\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\2\22\1\221"+
    "\20\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\1\22\1\222\1\0\23\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\11\22\1\223\1\224"+
    "\10\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\1\225\22\22\57\0\1\226\33\0\1\227"+
    "\2\0\1\230\100\0\1\231\104\0\1\232\43\0\1\233"+
    "\36\0\1\234\102\0\1\235\104\0\1\236\103\0\1\237"+
    "\7\0\100\103\1\0\1\103\1\0\1\120\1\240\101\120"+
    "\23\106\1\0\53\106\1\0\2\106\13\0\6\241\1\0"+
    "\1\241\1\0\1\242\1\241\2\0\2\241\1\0\23\241"+
    "\26\0\1\110\2\0\20\110\1\0\55\110\4\0\1\112"+
    "\100\0\2\120\1\0\100\120\1\115\2\0\60\115\1\0"+
    "\17\115\2\0\1\243\7\0\6\244\1\0\1\244\2\0"+
    "\1\244\2\0\2\244\1\0\23\244\40\0\6\244\1\0"+
    "\1\244\2\0\1\244\2\0\2\244\1\0\23\244\42\0"+
    "\2\122\3\0\1\122\2\0\1\122\2\0\2\122\1\0"+
    "\23\122\55\0\1\245\53\0\1\124\1\246\1\247\100\124"+
    "\6\250\1\251\74\250\2\0\1\131\112\0\1\132\1\133"+
    "\2\0\1\135\1\136\1\137\1\140\73\0\2\133\2\0"+
    "\2\133\1\137\1\140\73\0\1\252\1\253\1\0\3\253"+
    "\1\0\1\253\10\0\2\253\3\0\1\253\1\0\1\253"+
    "\53\0\1\136\1\133\2\0\2\136\1\137\1\140\73\0"+
    "\1\254\1\133\2\0\2\254\1\137\1\140\73\0\2\137"+
    "\2\0\2\137\1\0\1\140\73\0\2\255\2\0\2\255"+
    "\2\0\1\256\42\0\1\256\25\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\4\22\1\257\16\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\12\22\1\260\10\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\4\22\1\261\16\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\11\22\1\262\11\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\6\22\1\263\14\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\6\22\1\264\14\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\3\22\1\265\17\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\7\22\1\266\13\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\2\22\1\267\20\22"+
    "\36\0\2\22\6\154\1\0\1\154\1\0\1\22\1\154"+
    "\2\0\2\154\1\0\23\154\36\0\2\22\6\154\1\0"+
    "\1\154\1\0\1\155\1\154\2\0\2\154\1\0\23\154"+
    "\36\0\2\22\6\154\1\0\1\154\1\0\1\22\1\154"+
    "\2\0\1\154\1\270\1\0\23\154\53\0\1\271\65\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\11\22\1\272\2\22\1\273\6\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\1\22\1\274"+
    "\21\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\2\22\1\275\20\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\4\22\1\276"+
    "\16\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\7\22\1\277\13\22\36\0\10\22\1\0"+
    "\1\300\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\11\22\1\301\11\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\12\22\1\302\10\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\1\303\3\22\1\304\16\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\14\22\1\305\6\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\4\22\1\306\16\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\10\22\1\307\4\22"+
    "\1\310\5\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\1\311\2\22\1\312\17\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\2\22\1\313\1\314\17\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\6\22\1\315\14\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\1\316\10\22\1\317\11\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\16\22\1\320"+
    "\4\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\20\22\1\321\2\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\12\22\1\322"+
    "\10\22\36\0\5\22\1\323\2\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\5\22\1\324\15\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\15\22\1\325\5\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\21\22\1\326\1\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\2\22\1\327\20\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\2\22\1\330\1\331\17\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\1\332"+
    "\1\22\1\0\23\22\36\0\10\22\1\0\1\333\1\0"+
    "\2\22\2\0\2\22\1\0\23\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\14\22\1\334"+
    "\6\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\3\22\1\335\17\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\11\22\1\336"+
    "\11\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\4\22\1\337\16\22\116\0\1\340\102\0"+
    "\1\160\14\0\1\120\112\0\6\241\1\0\1\241\2\0"+
    "\1\241\2\0\2\241\1\0\23\241\56\0\1\341\54\0"+
    "\1\247\100\0\6\250\1\342\74\250\5\343\1\344\1\251"+
    "\74\343\12\0\2\345\1\0\3\345\1\0\1\345\10\0"+
    "\2\345\3\0\1\345\1\0\1\345\53\0\1\346\1\133"+
    "\2\0\2\346\1\137\1\140\73\0\2\255\2\0\2\255"+
    "\73\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\2\22\1\310\20\22\36\0\10\22\1\0\1\347"+
    "\1\0\2\22\2\0\2\22\1\0\23\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\1\350"+
    "\22\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\1\351\22\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\5\22\1\352\15\22"+
    "\36\0\10\22\1\0\1\353\1\0\2\22\2\0\2\22"+
    "\1\0\23\22\36\0\5\22\1\354\2\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\2\22\1\355\4\22"+
    "\1\356\4\22\1\357\1\22\1\360\4\22\36\0\10\22"+
    "\1\0\1\361\1\0\2\22\2\0\2\22\1\0\23\22"+
    "\36\0\2\22\6\154\1\0\1\154\1\0\1\22\1\154"+
    "\2\0\2\154\1\0\14\154\1\362\6\154\40\0\6\363"+
    "\1\0\1\363\2\0\1\363\2\0\2\363\1\0\23\363"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\3\22\1\364\17\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\22\22\1\365\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\12\22\1\366\10\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\3\22\1\367\17\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\1\370\22\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\1\371\22\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\12\22\1\372"+
    "\10\22\36\0\5\22\1\373\2\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\23\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\3\22\1\374"+
    "\17\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\14\22\1\375\6\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\3\22\1\376"+
    "\17\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\11\22\1\377\11\22\36\0\10\22\1\0"+
    "\1\u0100\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\12\22\1\u0101\10\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\15\22\1\u0102\5\22\36\0"+
    "\10\22\1\0\1\u0103\1\0\2\22\2\0\2\22\1\0"+
    "\23\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\5\22\1\u0104\15\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\2\22\1\u0105"+
    "\1\u0106\17\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\2\22\1\u0107\20\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\6\22"+
    "\1\u0108\14\22\36\0\10\22\1\0\1\u0109\1\0\2\22"+
    "\2\0\2\22\1\0\23\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\12\22\1\u010a\10\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\1\u010b\22\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\12\22\1\u010c\10\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\1\22\1\u010d\21\22\36\0\10\22\1\0\1\u010e\1\0"+
    "\2\22\2\0\2\22\1\0\23\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\3\22\1\u010f"+
    "\17\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\3\22\1\u0110\17\22\36\0\10\22\1\0"+
    "\1\u0111\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\12\22\1\u0112\10\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\12\22\1\u0113\10\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\11\22\1\u0114\11\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\1\22\1\u0115\21\22\55\0"+
    "\1\u0116\53\0\5\250\1\344\1\342\74\250\6\343\1\u0117"+
    "\74\343\12\0\2\u0118\1\0\3\u0118\1\0\1\u0118\10\0"+
    "\2\u0118\3\0\1\u0118\1\0\1\u0118\53\0\1\u0119\1\133"+
    "\2\0\2\u0119\1\137\1\140\71\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\1\u011a\22\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\3\22\1\u011b\17\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\12\22\1\u011c\10\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\3\22\1\u011d\17\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\6\22\1\u011e\14\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\11\22\1\u011f\11\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\16\22\1\u0120\4\22\36\0"+
    "\10\22\1\0\1\u0121\1\0\2\22\2\0\2\22\1\0"+
    "\23\22\36\0\5\22\1\u0122\2\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\23\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\1\22\1\u0123\1\0\23\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\14\22\1\u0124\6\22\36\0\2\22\6\154\1\0"+
    "\1\154\1\0\1\22\1\154\2\0\2\154\1\0\2\154"+
    "\1\u0125\20\154\27\0\1\u0126\1\u0127\7\0\6\363\1\0"+
    "\1\363\2\0\1\363\2\0\2\363\1\0\23\363\36\0"+
    "\10\22\1\0\1\u0128\1\0\2\22\2\0\2\22\1\0"+
    "\23\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\1\u0129\22\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\14\22\1\u012a\6\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\4\22\1\u012b\16\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\10\22\1\u012c\12\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\13\22\1\u012d\7\22\36\0\10\22\1\0\1\u012e"+
    "\1\0\2\22\2\0\2\22\1\0\23\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\14\22"+
    "\1\u012f\6\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\6\22\1\u0130\14\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\5\22"+
    "\1\u0131\15\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\16\22\1\u0132\4\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\4\22"+
    "\1\u0133\16\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\1\22\1\u0134\1\0\23\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\3\22\1\u0135"+
    "\17\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\14\22\1\u0136\6\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\2\22\1\u0137"+
    "\20\22\36\0\10\22\1\0\1\u0138\1\0\2\22\2\0"+
    "\2\22\1\0\23\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\2\22\1\u0139\20\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\15\22\1\u013a\5\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\1\u013b\22\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\12\22"+
    "\1\u013c\10\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\5\22\1\u013d\15\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\1\u013e"+
    "\22\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\4\22\1\u013f\12\22\1\u0140\3\22\36\0"+
    "\10\22\1\0\1\u0141\1\0\2\22\2\0\2\22\1\0"+
    "\23\22\36\0\10\22\1\0\1\u0142\1\0\2\22\2\0"+
    "\2\22\1\0\23\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\1\u0143\22\22\26\0\5\343"+
    "\1\u0144\1\u0117\74\343\12\0\2\u0145\1\0\3\u0145\1\0"+
    "\1\u0145\10\0\2\u0145\3\0\1\u0145\1\0\1\u0145\53\0"+
    "\1\u0146\1\133\2\0\2\u0146\1\137\1\140\71\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\5\22"+
    "\1\u0147\15\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\14\22\1\u0148\6\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\7\22"+
    "\1\u0149\13\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\4\22\1\u014a\16\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\14\22"+
    "\1\u014b\6\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\5\22\1\u014c\15\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\14\22"+
    "\1\u014d\6\22\36\0\5\22\1\u014e\2\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\23\22\30\0\1\u0127"+
    "\110\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\5\22\1\u014f\15\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\3\22\1\u0150\17\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\5\22\1\u0151\15\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\1\u0152\22\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\1\u0153\22\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\5\22\1\u0154\15\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\17\22"+
    "\1\u0155\3\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\1\22\1\u0156\1\0\23\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\6\22\1\u0157"+
    "\14\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\6\22\1\u0158\14\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\1\u0159\1\22\1\0\23\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\12\22\1\u015a\10\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\4\22\1\u015b\16\22"+
    "\36\0\10\22\1\0\1\u015c\1\0\2\22\2\0\2\22"+
    "\1\0\23\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\3\22\1\u015d\17\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\6\22"+
    "\1\u015e\14\22\36\0\5\22\1\u015f\2\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\23\22\36\0\10\22"+
    "\1\0\1\u0160\1\0\2\22\2\0\2\22\1\0\23\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\20\22\1\u0161\2\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\12\22\1\u0162\10\22"+
    "\40\0\2\u0163\1\0\3\u0163\1\0\1\u0163\10\0\2\u0163"+
    "\3\0\1\u0163\1\0\1\u0163\53\0\1\u0164\1\133\2\0"+
    "\2\u0164\1\137\1\140\71\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\1\22\1\u0165\1\0\23\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\11\22"+
    "\1\u0166\11\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\2\22\1\u0167\20\22\36\0\10\22"+
    "\1\0\1\u0168\1\0\2\22\2\0\2\22\1\0\23\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\3\22\1\u0169\17\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\12\22\1\u016a\10\22"+
    "\36\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\12\22\1\u016b\10\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\2\22\1\0\3\22\1\u016c\17\22"+
    "\36\0\10\22\1\0\1\u016d\1\0\2\22\2\0\2\22"+
    "\1\0\23\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\5\22\1\u016e\15\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\6\22"+
    "\1\u016f\14\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\15\22\1\u0170\5\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\1\u0171"+
    "\22\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\3\22\1\u0172\17\22\36\0\10\22\1\0"+
    "\1\u0173\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\5\22\1\u0174\15\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\1\u0175\22\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\4\22"+
    "\1\u0176\16\22\36\0\10\22\1\0\1\u0177\1\0\2\22"+
    "\2\0\2\22\1\0\23\22\40\0\2\u0178\1\0\3\u0178"+
    "\1\0\1\u0178\10\0\2\u0178\3\0\1\u0178\1\0\1\u0178"+
    "\53\0\1\u0179\1\133\2\0\2\u0179\1\137\1\140\71\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\6\22\1\u017a\14\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\1\u017b\22\22\36\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\2\22\1\0\5\22"+
    "\1\u017c\15\22\36\0\10\22\1\0\1\22\1\0\2\22"+
    "\2\0\2\22\1\0\1\u017d\22\22\36\0\10\22\1\0"+
    "\1\u017e\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\u017f\1\0\2\22\2\0\2\22\1\0"+
    "\23\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\3\22\1\u0180\17\22\36\0\10\22\1\0"+
    "\1\u0181\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\5\22\1\u0182\15\22\36\0\10\22\1\0\1\u0183\1\0"+
    "\2\22\2\0\2\22\1\0\23\22\36\0\10\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\5\22\1\u0184"+
    "\15\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\6\22\1\u0185\14\22\40\0\2\u0186\1\0"+
    "\3\u0186\1\0\1\u0186\10\0\2\u0186\3\0\1\u0186\1\0"+
    "\1\u0186\53\0\1\u0187\1\133\2\0\2\u0187\1\137\1\140"+
    "\71\0\10\22\1\0\1\22\1\0\2\22\2\0\2\22"+
    "\1\0\5\22\1\u0188\15\22\36\0\10\22\1\0\1\22"+
    "\1\0\2\22\2\0\1\22\1\u0189\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\4\22\1\u018a\16\22\36\0\10\22\1\0\1\22\1\0"+
    "\2\22\2\0\2\22\1\0\7\22\1\u018b\13\22\36\0"+
    "\10\22\1\0\1\u018c\1\0\2\22\2\0\2\22\1\0"+
    "\23\22\36\0\10\22\1\0\1\22\1\0\2\22\2\0"+
    "\2\22\1\0\11\22\1\u018d\11\22\36\0\10\22\1\0"+
    "\1\u018e\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\3\22\1\u018f\17\22\40\0\2\u0190\1\0\3\u0190\1\0"+
    "\1\u0190\10\0\2\u0190\3\0\1\u0190\1\0\1\u0190\53\0"+
    "\1\u0191\1\133\2\0\2\u0191\1\137\1\140\71\0\10\22"+
    "\1\0\1\22\1\0\2\22\2\0\1\22\1\u0192\1\0"+
    "\23\22\36\0\10\22\1\0\1\u0193\1\0\2\22\2\0"+
    "\2\22\1\0\23\22\36\0\5\22\1\u0194\2\22\1\0"+
    "\1\22\1\0\2\22\2\0\2\22\1\0\23\22\36\0"+
    "\10\22\1\0\1\22\1\0\2\22\2\0\2\22\1\0"+
    "\2\22\1\u0195\20\22\40\0\1\u0196\1\133\2\0\2\u0196"+
    "\1\137\1\140\73\0\1\u0197\1\133\2\0\2\u0197\1\137"+
    "\1\140\73\0\1\u0198\1\133\2\0\2\u0198\1\137\1\140"+
    "\73\0\1\u0199\1\133\2\0\2\u0199\1\137\1\140\73\0"+
    "\1\u019a\1\133\2\0\2\u019a\1\137\1\140\73\0\1\u019b"+
    "\1\133\2\0\2\u019b\1\137\1\140\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20301];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\1\1\11\1\1\2\11\37\1\10\11\7\1"+
    "\6\11\1\1\1\11\5\1\2\11\4\1\2\11\3\1"+
    "\1\0\2\11\1\1\1\11\2\1\1\0\3\1\1\0"+
    "\11\1\2\11\4\1\3\11\2\1\2\11\37\1\6\11"+
    "\2\1\2\11\2\1\2\0\1\1\1\0\1\1\1\11"+
    "\2\0\4\1\1\0\12\1\1\0\46\1\1\11\3\0"+
    "\1\11\16\1\1\0\42\1\1\11\1\0\17\1\1\11"+
    "\34\1\1\11\113\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  //TODO (FD): Please comment fields.	
  private String originId;
  private ETokenType lastTokenType;
  private boolean lastDirectOutput = true;
  
  //TODO (FD): Why use StringBuffers instead of StringBuilders?
  //TODO (FD): Can't these be final.
  private StringBuffer string = new StringBuffer();
  private StringBuffer directOutput = new StringBuffer();
  private HashSet<String> variablesInString;
  
  private String docCommentParameter;
  private String heredocLabel;
  
  /** Set up scanner */  
  public PHPScanner(java.io.Reader reader, String originId) {
    this.zzReader = reader;
    this.originId = originId;
  }
  
  /** Resets scanner */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    this.zzReader = reader;
    this.lastTokenType = null;
    yyreset(this.zzReader);
  }
  
  //TODO (FD): Why do you call these methods callbacks?
  /** Callback for the beginning of a string.  */
  private void beginString() {
    string.setLength(0);
    string.append(yytext());
    variablesInString = new HashSet<String>();
  }
  
  /** Callback for when a variable is matched inside a string */
  private void foundVariableInString() {
    String match = yytext();
    string.append(match);
    variablesInString.add(match);
  }
  
  /** Callback for the end of a string */
  private PHPToken endString(ETokenType type) {
    yybegin(PHP);
    string.append(yytext());
    PHPToken token = new PHPToken(type, yychar-string.length()+1, yyline, string.toString(), originId);
    if (variablesInString != null && variablesInString.size() > 0) {
      // TODO (BH): I commented this out as we use "plain" tokens now. Maybe this also means that we can simplify the grammar?
      // token.setContainedVariables(variablesInString);
    }
    variablesInString = null;
    return token;
  }
  
  /** {@inheritDoc} */
  public void close() throws java.io.IOException {
    yyclose();
  }
  
  /** Wrapper for yyGetNextToken */
  public PHPToken getNextToken() throws java.io.IOException {
    PHPToken token = yyGetNextToken();
    lastTokenType = token.getType();
  	return token;
  }
  
  /** Check whether keyword is function, method or class name */
  private PHPToken keywordThatMightBeName(ETokenType type) {
  	//TODO (FD): What about comment tokens, e.g. function /* comment */ test.
    PHPToken identifierToken = new PHPToken(ETokenType.IDENTIFIER, yychar, yyline, yytext(), originId);
    PHPToken keywordToken = new PHPToken(type, yychar, yyline, yytext(), originId);
    
    if (lastTokenType == ETokenType.FUNCTION || lastTokenType == ETokenType.CLASS
        || lastTokenType == ETokenType.PHP_INSTANCE_CALL || lastTokenType == ETokenType.PHP_STATIC_CALL
        || lastTokenType == ETokenType.NEW) {
      return identifierToken;
    }
    
    try {
      PHPToken nextToken = yyGetNextToken();
      ETokenType nextTokenType = nextToken.getType();
      yypushback(yytext().length());
      if (nextTokenType == ETokenType.LPAREN || nextTokenType == ETokenType.PHP_STATIC_CALL) {
        return identifierToken;
      }
    } catch(java.io.IOException ex) {}
    
    return keywordToken;
  }
  
  /** This indicates that a constructor shouldn't be used. */
  public class DeprecatedConstructorException extends Exception {}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PHPScanner(java.io.Reader in) throws DeprecatedConstructorException
 {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PHPScanner(java.io.InputStream in) throws DeprecatedConstructorException
 {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2268) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPToken yyGetNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 83: 
          { return keywordThatMightBeName(ETokenType.NULL_LITERAL);
          }
        case 129: break;
        case 124: 
          { return new PHPToken(ETokenType.INTERFACE, yychar, yyline, yytext(), originId);
          }
        case 130: break;
        case 15: 
          { return new PHPToken(ETokenType.LPAREN, yychar, yyline, yytext(), originId);
          }
        case 131: break;
        case 18: 
          { return new PHPToken(ETokenType.RBRACE, yychar, yyline, yytext(), originId);
          }
        case 132: break;
        case 80: 
          { return keywordThatMightBeName(ETokenType.BOOLEAN_LITERAL);
          }
        case 133: break;
        case 113: 
          { return keywordThatMightBeName(ETokenType.BOOLEAN);
          }
        case 134: break;
        case 78: 
          { return keywordThatMightBeName(ETokenType.BOOL);
          }
        case 135: break;
        case 44: 
          { return new PHPToken(ETokenType.DIVEQ, yychar, yyline, yytext(), originId);
          }
        case 136: break;
        case 28: 
          { return new PHPToken(ETokenType.AND, yychar, yyline, yytext(), originId);
          }
        case 137: break;
        case 81: 
          { return keywordThatMightBeName(ETokenType.REAL);
          }
        case 138: break;
        case 60: 
          { return new PHPToken(ETokenType.MINUSMINUS, yychar, yyline, yytext(), originId);
          }
        case 139: break;
        case 119: 
          { return new PHPToken(ETokenType.ABSTRACT, yychar, yyline, yytext(), originId);
          }
        case 140: break;
        case 93: 
          { return new PHPToken(ETokenType.THROW, yychar, yyline, yytext(), originId);
          }
        case 141: break;
        case 35: 
          { beginString(); yybegin(BACKTICKSTRING);
          }
        case 142: break;
        case 27: 
          { return new PHPToken(ETokenType.NOT, yychar, yyline, yytext(), originId);
          }
        case 143: break;
        case 110: 
          { return new PHPToken(ETokenType.FOREACH, yychar, yyline, yytext(), originId);
          }
        case 144: break;
        case 1: 
          { directOutput.append( yytext() );
          }
        case 145: break;
        case 82: 
          { return new PHPToken(ETokenType.CASE, yychar, yyline, yytext(), originId);
          }
        case 146: break;
        case 11: 
          { return new PHPToken(ETokenType.PLUS, yychar, yyline, yytext(), originId);
          }
        case 147: break;
        case 45: 
          { return new PHPToken(ETokenType.MULTEQ, yychar, yyline, yytext(), originId);
          }
        case 148: break;
        case 63: 
          { return new PHPToken(ETokenType.MODEQ, yychar, yyline, yytext(), originId);
          }
        case 149: break;
        case 5: 
          { return new PHPToken(ETokenType.DIV, yychar, yyline, yytext(), originId);
          }
        case 150: break;
        case 29: 
          { return new PHPToken(ETokenType.OR, yychar, yyline, yytext(), originId);
          }
        case 151: break;
        case 125: 
          { return new PHPToken(ETokenType.ENDFOREACH, yychar, yyline, yytext(), originId);
          }
        case 152: break;
        case 4: 
          { yyline -= 1;
          }
        case 153: break;
        case 47: 
          { return new PHPToken(ETokenType.PLUSPLUS, yychar, yyline, yytext(), originId);
          }
        case 154: break;
        case 84: 
          { return new PHPToken(ETokenType.LIST, yychar, yyline, yytext(), originId);
          }
        case 155: break;
        case 16: 
          { return new PHPToken(ETokenType.RPAREN, yychar, yyline, yytext(), originId);
          }
        case 156: break;
        case 62: 
          { return new PHPToken(ETokenType.PHP_STATIC_CALL, yychar, yyline, yytext(), originId);
          }
        case 157: break;
        case 114: 
          { return new PHPToken(ETokenType.DEFAULT, yychar, yyline, yytext(), originId);
          }
        case 158: break;
        case 101: 
          { return new PHPToken(ETokenType.ELSEIF, yychar, yyline, yytext(), originId);
          }
        case 159: break;
        case 66: 
          { return new PHPToken(ETokenType.ANDAND, yychar, yyline, yytext(), originId);
          }
        case 160: break;
        case 31: 
          { return new PHPToken(ETokenType.COMP, yychar, yyline, yytext(), originId);
          }
        case 161: break;
        case 68: 
          { foundVariableInString();
          }
        case 162: break;
        case 123: 
          { return new PHPToken(ETokenType.NAMESPACE, yychar, yyline, yytext(), originId);
          }
        case 163: break;
        case 104: 
          { return keywordThatMightBeName(ETokenType.STRING);
          }
        case 164: break;
        case 2: 
          { return new PHPToken(ETokenType.ILLEGAL_CHARACTER, yychar, yyline, yytext(), originId);
          }
        case 165: break;
        case 111: 
          { return new PHPToken(ETokenType.EXTENDS, yychar, yyline, yytext(), originId);
          }
        case 166: break;
        case 50: 
          { return new PHPToken(ETokenType.LSHIFT, yychar, yyline, yytext(), originId);
          }
        case 167: break;
        case 24: 
          { return new PHPToken(ETokenType.COLON, yychar, yyline, yytext(), originId);
          }
        case 168: break;
        case 96: 
          { return new PHPToken(ETokenType.CLASS, yychar, yyline, yytext(), originId);
          }
        case 169: break;
        case 22: 
          { return new PHPToken(ETokenType.COMMA, yychar, yyline, yytext(), originId);
          }
        case 170: break;
        case 40: 
          { yypushback(yylength()); yybegin(PHP);
          }
        case 171: break;
        case 90: 
          { heredocLabel = yytext().trim();
                                   heredocLabel = heredocLabel.substring(3, heredocLabel.length());
                                   beginString();
                                   yybegin(HEREDOC);
          }
        case 172: break;
        case 33: 
          { beginString(); yybegin(DOUBLEQUOTEDSTRING);
          }
        case 173: break;
        case 76: 
          { return new PHPToken(ETokenType.TRADITIONAL_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 174: break;
        case 94: 
          { return new PHPToken(ETokenType.CATCH, yychar, yyline, yytext(), originId);
          }
        case 175: break;
        case 7: 
          { return new PHPToken(ETokenType.HASH_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 176: break;
        case 30: 
          { return new PHPToken(ETokenType.XOR, yychar, yyline, yytext(), originId);
          }
        case 177: break;
        case 67: 
          { return new PHPToken(ETokenType.OROR, yychar, yyline, yytext(), originId);
          }
        case 178: break;
        case 72: 
          { return new PHPToken(ETokenType.NEW, yychar, yyline, yytext(), originId);
          }
        case 179: break;
        case 100: 
          { return new PHPToken(ETokenType.ENDFOR, yychar, yyline, yytext(), originId);
          }
        case 180: break;
        case 105: 
          { return new PHPToken(ETokenType.SWITCH, yychar, yyline, yytext(), originId);
          }
        case 181: break;
        case 108: 
          { return keywordThatMightBeName(ETokenType.OBJECT);
          }
        case 182: break;
        case 97: 
          { return keywordThatMightBeName(ETokenType.CLONE);
          }
        case 183: break;
        case 103: 
          { return new PHPToken(ETokenType.STATIC, yychar, yyline, yytext(), originId);
          }
        case 184: break;
        case 39: 
          { return endString(ETokenType.BACKTICK_STRING_LITERAL);
          }
        case 185: break;
        case 117: 
          { return new PHPToken(ETokenType.FUNCTION, yychar, yyline, yytext(), originId);
          }
        case 186: break;
        case 89: 
          { return new PHPToken(ETokenType.THIS, yychar, yyline, yytext(), originId);
          }
        case 187: break;
        case 121: 
          { return new PHPToken(ETokenType.ENDSWITCH, yychar, yyline, yytext(), originId);
          }
        case 188: break;
        case 75: 
          { return new PHPToken(ETokenType.VAR, yychar, yyline, yytext(), originId);
          }
        case 189: break;
        case 74: 
          { return new PHPToken(ETokenType.USE, yychar, yyline, yytext(), originId);
          }
        case 190: break;
        case 98: 
          { return new PHPToken(ETokenType.WHILE, yychar, yyline, yytext(), originId);
          }
        case 191: break;
        case 73: 
          { return keywordThatMightBeName(ETokenType.INT);
          }
        case 192: break;
        case 54: 
          { return new PHPToken(ETokenType.RSHIFT, yychar, yyline, yytext(), originId);
          }
        case 193: break;
        case 92: 
          { return new PHPToken(ETokenType.BREAK, yychar, yyline, yytext(), originId);
          }
        case 194: break;
        case 88: 
          { return new PHPToken(ETokenType.ENDIF, yychar, yyline, yytext(), originId);
          }
        case 195: break;
        case 65: 
          { return new PHPToken(ETokenType.EQEQ, yychar, yyline, yytext(), originId);
          }
        case 196: break;
        case 14: 
          { return new PHPToken(ETokenType.GT, yychar, yyline, yytext(), originId);
          }
        case 197: break;
        case 116: 
          { return keywordThatMightBeName(ETokenType.INTEGER);
          }
        case 198: break;
        case 37: 
          { return endString(ETokenType.STRING_LITERAL);
          }
        case 199: break;
        case 115: 
          { return new PHPToken(ETokenType.DECLARE, yychar, yyline, yytext(), originId);
          }
        case 200: break;
        case 91: 
          { return new PHPToken(ETokenType.ARRAY, yychar, yyline, yytext(), originId);
          }
        case 201: break;
        case 53: 
          { yybegin(YYINITIAL); directOutput.setLength(0); string.setLength(0);
                                   return new PHPToken(ETokenType.PHP_END, yychar, yyline, yytext(), originId);
          }
        case 202: break;
        case 55: 
          { return new PHPToken(ETokenType.GTEQ, yychar, yyline, yytext(), originId);
          }
        case 203: break;
        case 25: 
          { return new PHPToken(ETokenType.MOD, yychar, yyline, yytext(), originId);
          }
        case 204: break;
        case 126: 
          { return new PHPToken(ETokenType.ENDDECLARE, yychar, yyline, yytext(), originId);
          }
        case 205: break;
        case 10: 
          { return new PHPToken(ETokenType.DOT, yychar, yyline, yytext(), originId);
          }
        case 206: break;
        case 77: 
          { return new PHPToken(ETokenType.ELSE, yychar, yyline, yytext(), originId);
          }
        case 207: break;
        case 99: 
          { return new PHPToken(ETokenType.DOCUMENTATION_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 208: break;
        case 59: 
          { yybegin(INSTANCECALL);
                                   return new PHPToken(ETokenType.PHP_INSTANCE_CALL, yychar, yyline, yytext(), originId);
          }
        case 209: break;
        case 21: 
          { return new PHPToken(ETokenType.SEMICOLON, yychar, yyline, yytext(), originId);
          }
        case 210: break;
        case 70: 
          { return new PHPToken(ETokenType.FOR, yychar, yyline, yytext(), originId);
          }
        case 211: break;
        case 71: 
          { return new PHPToken(ETokenType.TRY, yychar, yyline, yytext(), originId);
          }
        case 212: break;
        case 42: 
          { //TODO (FD): Please comment on this case distinction
                                   if (directOutput.length() == 0) {
                                     yybegin(PHP);
                                     return new PHPToken(ETokenType.PHP_BEGIN, yychar, yyline, yytext(), originId);
                                   } else {
                                     String matched = yytext();
                                     yypushback(matched.length());
                                     //TODO (FD): Multiple statements on line.
                                     String str = directOutput.toString(); directOutput.setLength(0);
                                     return new PHPToken(ETokenType.PHP_DIRECT_OUTPUT, yychar-str.length()+1, yyline, str, originId);
                                   }
          }
        case 213: break;
        case 12: 
          { return new PHPToken(ETokenType.LT, yychar, yyline, yytext(), originId);
          }
        case 214: break;
        case 46: 
          { return new PHPToken(ETokenType.FLOATING_POINT_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 215: break;
        case 6: 
          { return new PHPToken(ETokenType.MULT, yychar, yyline, yytext(), originId);
          }
        case 216: break;
        case 128: 
          { return new PHPToken(ETokenType.IMPLEMENTS, yychar, yyline, yytext(), originId);
          }
        case 217: break;
        case 51: 
          { return new PHPToken(ETokenType.NOTEQ, yychar, yyline, yytext(), originId);
          }
        case 218: break;
        case 56: 
          { return new PHPToken(ETokenType.AS, yychar, yyline, yytext(), originId);
          }
        case 219: break;
        case 41: 
          { yybegin(PHP); return new PHPToken(ETokenType.IDENTIFIER, yychar, yyline, yytext(), originId);
          }
        case 220: break;
        case 58: 
          { return new PHPToken(ETokenType.IF, yychar, yyline, yytext(), originId);
          }
        case 221: break;
        case 43: 
          { return new PHPToken(ETokenType.END_OF_LINE_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 222: break;
        case 13: 
          { return new PHPToken(ETokenType.QUESTION, yychar, yyline, yytext(), originId);
          }
        case 223: break;
        case 79: 
          { return keywordThatMightBeName(ETokenType.SELF);
          }
        case 224: break;
        case 118: 
          { return new PHPToken(ETokenType.ENDWHILE, yychar, yyline, yytext(), originId);
          }
        case 225: break;
        case 49: 
          { return new PHPToken(ETokenType.PHP_VARIABLE, yychar, yyline, yytext(), originId);
          }
        case 226: break;
        case 9: 
          { return new PHPToken(ETokenType.INTEGER_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 227: break;
        case 109: 
          { return new PHPToken(ETokenType.GLOBAL, yychar, yyline, yytext(), originId);
          }
        case 228: break;
        case 120: 
          { return new PHPToken(ETokenType.CONTINUE, yychar, yyline, yytext(), originId);
          }
        case 229: break;
        case 112: 
          { return new PHPToken(ETokenType.PRIVATE, yychar, yyline, yytext(), originId);
          }
        case 230: break;
        case 19: 
          { return new PHPToken(ETokenType.LBRACK, yychar, yyline, yytext(), originId);
          }
        case 231: break;
        case 106: 
          { return new PHPToken(ETokenType.RETURN, yychar, yyline, yytext(), originId);
          }
        case 232: break;
        case 87: 
          { return new PHPToken(ETokenType.FINAL, yychar, yyline, yytext(), originId);
          }
        case 233: break;
        case 52: 
          { return new PHPToken(ETokenType.LTEQ, yychar, yyline, yytext(), originId);
          }
        case 234: break;
        case 85: 
          { return new PHPToken(ETokenType.GOTO, yychar, yyline, yytext(), originId);
          }
        case 235: break;
        case 23: 
          { return new PHPToken(ETokenType.MINUS, yychar, yyline, yytext(), originId);
          }
        case 236: break;
        case 3: 
          { /* ignore */
          }
        case 237: break;
        case 34: 
          { beginString(); yybegin(SINGLEQUOTEDSTRING);
          }
        case 238: break;
        case 48: 
          { return new PHPToken(ETokenType.PLUSEQ, yychar, yyline, yytext(), originId);
          }
        case 239: break;
        case 8: 
          { return new PHPToken(ETokenType.IDENTIFIER, yychar, yyline, yytext(), originId);
          }
        case 240: break;
        case 95: 
          { return new PHPToken(ETokenType.CONST, yychar, yyline, yytext(), originId);
          }
        case 241: break;
        case 36: 
          { string.append( yytext() );
          }
        case 242: break;
        case 32: 
          { return new PHPToken(ETokenType.AT, yychar, yyline, yytext(), originId);
          }
        case 243: break;
        case 107: 
          { return keywordThatMightBeName(ETokenType.DOUBLE);
          }
        case 244: break;
        case 69: 
          { if (yytext().trim().equals(heredocLabel)) {
                                     return endString(ETokenType.PHP_HEREDOC);
                                   }
                                   string.append( yytext() );
          }
        case 245: break;
        case 57: 
          { return new PHPToken(ETokenType.DO, yychar, yyline, yytext(), originId);
          }
        case 246: break;
        case 26: 
          { return new PHPToken(ETokenType.EQ, yychar, yyline, yytext(), originId);
          }
        case 247: break;
        case 38: 
          { yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 248: break;
        case 64: 
          { return new PHPToken(ETokenType.ARROW, yychar, yyline, yytext(), originId);
          }
        case 249: break;
        case 122: 
          { return new PHPToken(ETokenType.PROTECTED, yychar, yyline, yytext(), originId);
          }
        case 250: break;
        case 61: 
          { return new PHPToken(ETokenType.MINUSEQ, yychar, yyline, yytext(), originId);
          }
        case 251: break;
        case 102: 
          { return new PHPToken(ETokenType.PUBLIC, yychar, yyline, yytext(), originId);
          }
        case 252: break;
        case 17: 
          { return new PHPToken(ETokenType.LBRACE, yychar, yyline, yytext(), originId);
          }
        case 253: break;
        case 127: 
          { return new PHPToken(ETokenType.INSTANCEOF, yychar, yyline, yytext(), originId);
          }
        case 254: break;
        case 20: 
          { return new PHPToken(ETokenType.RBRACK, yychar, yyline, yytext(), originId);
          }
        case 255: break;
        case 86: 
          { return keywordThatMightBeName(ETokenType.FLOAT);
          }
        case 256: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case DOUBLEQUOTEDSTRING: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 412: break;
            case YYINITIAL: {
              yybegin(YYINITIAL);
                                   if (directOutput.length() == 0 || !lastDirectOutput) {
                                     return new PHPToken(ETokenType.EOF, yychar, yyline, yytext(), originId);
                                   } else {
                                     lastDirectOutput = false;
                                     return new PHPToken(ETokenType.PHP_DIRECT_OUTPUT, yychar-directOutput.length(), yyline, directOutput.toString(), originId);
                                   }
            }
            case 413: break;
            case BACKTICKSTRING: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 414: break;
            case HEREDOC: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 415: break;
            case SINGLEQUOTEDSTRING: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 416: break;
            default:
              {
                return new PHPToken(ETokenType.EOF, yychar, yyline, yytext(), originId);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
